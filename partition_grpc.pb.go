// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package partitionv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PartitionServiceClient is the client API for PartitionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PartitionServiceClient interface {
	// Get a tenant in the system matching the id
	GetTenant(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*TenantObject, error)
	// List all tenants in the system matching the query in some way
	ListTenant(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (PartitionService_ListTenantClient, error)
	// Log a new tenant request
	CreateTenant(ctx context.Context, in *TenantRequest, opts ...grpc.CallOption) (*TenantObject, error)
	// List all tenants in the system matching the query in some way
	ListPartition(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (PartitionService_ListPartitionClient, error)
	// Log a new partition request
	CreatePartition(ctx context.Context, in *PartitionCreateRequest, opts ...grpc.CallOption) (*PartitionObject, error)
	// Get an existing partition object
	GetPartition(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*PartitionObject, error)
	// Update an existing partition object
	UpdatePartition(ctx context.Context, in *PartitionUpdateRequest, opts ...grpc.CallOption) (*PartitionObject, error)
	// Create a partition Role for a particular partition
	CreatePartitionRole(ctx context.Context, in *PartitionRoleCreateRequest, opts ...grpc.CallOption) (*PartitionRoleObject, error)
	// List partition roles available for this particular partition
	ListPartitionRoles(ctx context.Context, in *PartitionRoleListRequest, opts ...grpc.CallOption) (*PartitionRoleListResponse, error)
	// Remove a partition role that is not required
	RemovePartitionRole(ctx context.Context, in *PartitionRoleRemoveRequest, opts ...grpc.CallOption) (*RemoveResponse, error)
	// Creates a new page for access or customization of how a partition looks like
	CreatePage(ctx context.Context, in *PageCreateRequest, opts ...grpc.CallOption) (*PageObject, error)
	// Obtains a new page specific to a partition
	GetPage(ctx context.Context, in *PageGetRequest, opts ...grpc.CallOption) (*PageObject, error)
	// Removes a page from being accessible for a partition
	RemovePage(ctx context.Context, in *PageRemoveRequest, opts ...grpc.CallOption) (*RemoveResponse, error)
	// Creates a users ability to access a partition
	CreateAccess(ctx context.Context, in *AccessCreateRequest, opts ...grpc.CallOption) (*AccessObject, error)
	// Obtains a users access to a partition by access id or partition and profile id
	GetAccess(ctx context.Context, in *AccessGetRequest, opts ...grpc.CallOption) (*AccessObject, error)
	// Removes a user's ability to access a partition
	RemoveAccess(ctx context.Context, in *AccessRemoveRequest, opts ...grpc.CallOption) (*RemoveResponse, error)
	// Create an access Role for a particular access
	CreateAccessRole(ctx context.Context, in *AccessRoleCreateRequest, opts ...grpc.CallOption) (*AccessRoleObject, error)
	// List access roles available for this particular access
	ListAccessRoles(ctx context.Context, in *AccessRoleListRequest, opts ...grpc.CallOption) (*AccessRoleListResponse, error)
	// Remove an access role that is not required
	RemoveAccessRole(ctx context.Context, in *AccessRoleRemoveRequest, opts ...grpc.CallOption) (*RemoveResponse, error)
}

type partitionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPartitionServiceClient(cc grpc.ClientConnInterface) PartitionServiceClient {
	return &partitionServiceClient{cc}
}

func (c *partitionServiceClient) GetTenant(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*TenantObject, error) {
	out := new(TenantObject)
	err := c.cc.Invoke(ctx, "/partition.PartitionService/GetTenant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partitionServiceClient) ListTenant(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (PartitionService_ListTenantClient, error) {
	stream, err := c.cc.NewStream(ctx, &PartitionService_ServiceDesc.Streams[0], "/partition.PartitionService/ListTenant", opts...)
	if err != nil {
		return nil, err
	}
	x := &partitionServiceListTenantClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PartitionService_ListTenantClient interface {
	Recv() (*TenantObject, error)
	grpc.ClientStream
}

type partitionServiceListTenantClient struct {
	grpc.ClientStream
}

func (x *partitionServiceListTenantClient) Recv() (*TenantObject, error) {
	m := new(TenantObject)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *partitionServiceClient) CreateTenant(ctx context.Context, in *TenantRequest, opts ...grpc.CallOption) (*TenantObject, error) {
	out := new(TenantObject)
	err := c.cc.Invoke(ctx, "/partition.PartitionService/CreateTenant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partitionServiceClient) ListPartition(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (PartitionService_ListPartitionClient, error) {
	stream, err := c.cc.NewStream(ctx, &PartitionService_ServiceDesc.Streams[1], "/partition.PartitionService/ListPartition", opts...)
	if err != nil {
		return nil, err
	}
	x := &partitionServiceListPartitionClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PartitionService_ListPartitionClient interface {
	Recv() (*PartitionObject, error)
	grpc.ClientStream
}

type partitionServiceListPartitionClient struct {
	grpc.ClientStream
}

func (x *partitionServiceListPartitionClient) Recv() (*PartitionObject, error) {
	m := new(PartitionObject)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *partitionServiceClient) CreatePartition(ctx context.Context, in *PartitionCreateRequest, opts ...grpc.CallOption) (*PartitionObject, error) {
	out := new(PartitionObject)
	err := c.cc.Invoke(ctx, "/partition.PartitionService/CreatePartition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partitionServiceClient) GetPartition(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*PartitionObject, error) {
	out := new(PartitionObject)
	err := c.cc.Invoke(ctx, "/partition.PartitionService/GetPartition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partitionServiceClient) UpdatePartition(ctx context.Context, in *PartitionUpdateRequest, opts ...grpc.CallOption) (*PartitionObject, error) {
	out := new(PartitionObject)
	err := c.cc.Invoke(ctx, "/partition.PartitionService/UpdatePartition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partitionServiceClient) CreatePartitionRole(ctx context.Context, in *PartitionRoleCreateRequest, opts ...grpc.CallOption) (*PartitionRoleObject, error) {
	out := new(PartitionRoleObject)
	err := c.cc.Invoke(ctx, "/partition.PartitionService/CreatePartitionRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partitionServiceClient) ListPartitionRoles(ctx context.Context, in *PartitionRoleListRequest, opts ...grpc.CallOption) (*PartitionRoleListResponse, error) {
	out := new(PartitionRoleListResponse)
	err := c.cc.Invoke(ctx, "/partition.PartitionService/ListPartitionRoles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partitionServiceClient) RemovePartitionRole(ctx context.Context, in *PartitionRoleRemoveRequest, opts ...grpc.CallOption) (*RemoveResponse, error) {
	out := new(RemoveResponse)
	err := c.cc.Invoke(ctx, "/partition.PartitionService/RemovePartitionRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partitionServiceClient) CreatePage(ctx context.Context, in *PageCreateRequest, opts ...grpc.CallOption) (*PageObject, error) {
	out := new(PageObject)
	err := c.cc.Invoke(ctx, "/partition.PartitionService/CreatePage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partitionServiceClient) GetPage(ctx context.Context, in *PageGetRequest, opts ...grpc.CallOption) (*PageObject, error) {
	out := new(PageObject)
	err := c.cc.Invoke(ctx, "/partition.PartitionService/GetPage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partitionServiceClient) RemovePage(ctx context.Context, in *PageRemoveRequest, opts ...grpc.CallOption) (*RemoveResponse, error) {
	out := new(RemoveResponse)
	err := c.cc.Invoke(ctx, "/partition.PartitionService/RemovePage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partitionServiceClient) CreateAccess(ctx context.Context, in *AccessCreateRequest, opts ...grpc.CallOption) (*AccessObject, error) {
	out := new(AccessObject)
	err := c.cc.Invoke(ctx, "/partition.PartitionService/CreateAccess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partitionServiceClient) GetAccess(ctx context.Context, in *AccessGetRequest, opts ...grpc.CallOption) (*AccessObject, error) {
	out := new(AccessObject)
	err := c.cc.Invoke(ctx, "/partition.PartitionService/GetAccess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partitionServiceClient) RemoveAccess(ctx context.Context, in *AccessRemoveRequest, opts ...grpc.CallOption) (*RemoveResponse, error) {
	out := new(RemoveResponse)
	err := c.cc.Invoke(ctx, "/partition.PartitionService/RemoveAccess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partitionServiceClient) CreateAccessRole(ctx context.Context, in *AccessRoleCreateRequest, opts ...grpc.CallOption) (*AccessRoleObject, error) {
	out := new(AccessRoleObject)
	err := c.cc.Invoke(ctx, "/partition.PartitionService/CreateAccessRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partitionServiceClient) ListAccessRoles(ctx context.Context, in *AccessRoleListRequest, opts ...grpc.CallOption) (*AccessRoleListResponse, error) {
	out := new(AccessRoleListResponse)
	err := c.cc.Invoke(ctx, "/partition.PartitionService/ListAccessRoles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partitionServiceClient) RemoveAccessRole(ctx context.Context, in *AccessRoleRemoveRequest, opts ...grpc.CallOption) (*RemoveResponse, error) {
	out := new(RemoveResponse)
	err := c.cc.Invoke(ctx, "/partition.PartitionService/RemoveAccessRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PartitionServiceServer is the server API for PartitionService service.
// All implementations must embed UnimplementedPartitionServiceServer
// for forward compatibility
type PartitionServiceServer interface {
	// Get a tenant in the system matching the id
	GetTenant(context.Context, *GetRequest) (*TenantObject, error)
	// List all tenants in the system matching the query in some way
	ListTenant(*SearchRequest, PartitionService_ListTenantServer) error
	// Log a new tenant request
	CreateTenant(context.Context, *TenantRequest) (*TenantObject, error)
	// List all tenants in the system matching the query in some way
	ListPartition(*SearchRequest, PartitionService_ListPartitionServer) error
	// Log a new partition request
	CreatePartition(context.Context, *PartitionCreateRequest) (*PartitionObject, error)
	// Get an existing partition object
	GetPartition(context.Context, *GetRequest) (*PartitionObject, error)
	// Update an existing partition object
	UpdatePartition(context.Context, *PartitionUpdateRequest) (*PartitionObject, error)
	// Create a partition Role for a particular partition
	CreatePartitionRole(context.Context, *PartitionRoleCreateRequest) (*PartitionRoleObject, error)
	// List partition roles available for this particular partition
	ListPartitionRoles(context.Context, *PartitionRoleListRequest) (*PartitionRoleListResponse, error)
	// Remove a partition role that is not required
	RemovePartitionRole(context.Context, *PartitionRoleRemoveRequest) (*RemoveResponse, error)
	// Creates a new page for access or customization of how a partition looks like
	CreatePage(context.Context, *PageCreateRequest) (*PageObject, error)
	// Obtains a new page specific to a partition
	GetPage(context.Context, *PageGetRequest) (*PageObject, error)
	// Removes a page from being accessible for a partition
	RemovePage(context.Context, *PageRemoveRequest) (*RemoveResponse, error)
	// Creates a users ability to access a partition
	CreateAccess(context.Context, *AccessCreateRequest) (*AccessObject, error)
	// Obtains a users access to a partition by access id or partition and profile id
	GetAccess(context.Context, *AccessGetRequest) (*AccessObject, error)
	// Removes a user's ability to access a partition
	RemoveAccess(context.Context, *AccessRemoveRequest) (*RemoveResponse, error)
	// Create an access Role for a particular access
	CreateAccessRole(context.Context, *AccessRoleCreateRequest) (*AccessRoleObject, error)
	// List access roles available for this particular access
	ListAccessRoles(context.Context, *AccessRoleListRequest) (*AccessRoleListResponse, error)
	// Remove an access role that is not required
	RemoveAccessRole(context.Context, *AccessRoleRemoveRequest) (*RemoveResponse, error)
	mustEmbedUnimplementedPartitionServiceServer()
}

// UnimplementedPartitionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPartitionServiceServer struct {
}

func (UnimplementedPartitionServiceServer) GetTenant(context.Context, *GetRequest) (*TenantObject, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTenant not implemented")
}
func (UnimplementedPartitionServiceServer) ListTenant(*SearchRequest, PartitionService_ListTenantServer) error {
	return status.Errorf(codes.Unimplemented, "method ListTenant not implemented")
}
func (UnimplementedPartitionServiceServer) CreateTenant(context.Context, *TenantRequest) (*TenantObject, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTenant not implemented")
}
func (UnimplementedPartitionServiceServer) ListPartition(*SearchRequest, PartitionService_ListPartitionServer) error {
	return status.Errorf(codes.Unimplemented, "method ListPartition not implemented")
}
func (UnimplementedPartitionServiceServer) CreatePartition(context.Context, *PartitionCreateRequest) (*PartitionObject, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePartition not implemented")
}
func (UnimplementedPartitionServiceServer) GetPartition(context.Context, *GetRequest) (*PartitionObject, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPartition not implemented")
}
func (UnimplementedPartitionServiceServer) UpdatePartition(context.Context, *PartitionUpdateRequest) (*PartitionObject, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePartition not implemented")
}
func (UnimplementedPartitionServiceServer) CreatePartitionRole(context.Context, *PartitionRoleCreateRequest) (*PartitionRoleObject, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePartitionRole not implemented")
}
func (UnimplementedPartitionServiceServer) ListPartitionRoles(context.Context, *PartitionRoleListRequest) (*PartitionRoleListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPartitionRoles not implemented")
}
func (UnimplementedPartitionServiceServer) RemovePartitionRole(context.Context, *PartitionRoleRemoveRequest) (*RemoveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemovePartitionRole not implemented")
}
func (UnimplementedPartitionServiceServer) CreatePage(context.Context, *PageCreateRequest) (*PageObject, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePage not implemented")
}
func (UnimplementedPartitionServiceServer) GetPage(context.Context, *PageGetRequest) (*PageObject, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPage not implemented")
}
func (UnimplementedPartitionServiceServer) RemovePage(context.Context, *PageRemoveRequest) (*RemoveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemovePage not implemented")
}
func (UnimplementedPartitionServiceServer) CreateAccess(context.Context, *AccessCreateRequest) (*AccessObject, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccess not implemented")
}
func (UnimplementedPartitionServiceServer) GetAccess(context.Context, *AccessGetRequest) (*AccessObject, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccess not implemented")
}
func (UnimplementedPartitionServiceServer) RemoveAccess(context.Context, *AccessRemoveRequest) (*RemoveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveAccess not implemented")
}
func (UnimplementedPartitionServiceServer) CreateAccessRole(context.Context, *AccessRoleCreateRequest) (*AccessRoleObject, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccessRole not implemented")
}
func (UnimplementedPartitionServiceServer) ListAccessRoles(context.Context, *AccessRoleListRequest) (*AccessRoleListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAccessRoles not implemented")
}
func (UnimplementedPartitionServiceServer) RemoveAccessRole(context.Context, *AccessRoleRemoveRequest) (*RemoveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveAccessRole not implemented")
}
func (UnimplementedPartitionServiceServer) mustEmbedUnimplementedPartitionServiceServer() {}

// UnsafePartitionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PartitionServiceServer will
// result in compilation errors.
type UnsafePartitionServiceServer interface {
	mustEmbedUnimplementedPartitionServiceServer()
}

func RegisterPartitionServiceServer(s grpc.ServiceRegistrar, srv PartitionServiceServer) {
	s.RegisterService(&PartitionService_ServiceDesc, srv)
}

func _PartitionService_GetTenant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartitionServiceServer).GetTenant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/partition.PartitionService/GetTenant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartitionServiceServer).GetTenant(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartitionService_ListTenant_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SearchRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PartitionServiceServer).ListTenant(m, &partitionServiceListTenantServer{stream})
}

type PartitionService_ListTenantServer interface {
	Send(*TenantObject) error
	grpc.ServerStream
}

type partitionServiceListTenantServer struct {
	grpc.ServerStream
}

func (x *partitionServiceListTenantServer) Send(m *TenantObject) error {
	return x.ServerStream.SendMsg(m)
}

func _PartitionService_CreateTenant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TenantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartitionServiceServer).CreateTenant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/partition.PartitionService/CreateTenant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartitionServiceServer).CreateTenant(ctx, req.(*TenantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartitionService_ListPartition_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SearchRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PartitionServiceServer).ListPartition(m, &partitionServiceListPartitionServer{stream})
}

type PartitionService_ListPartitionServer interface {
	Send(*PartitionObject) error
	grpc.ServerStream
}

type partitionServiceListPartitionServer struct {
	grpc.ServerStream
}

func (x *partitionServiceListPartitionServer) Send(m *PartitionObject) error {
	return x.ServerStream.SendMsg(m)
}

func _PartitionService_CreatePartition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PartitionCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartitionServiceServer).CreatePartition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/partition.PartitionService/CreatePartition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartitionServiceServer).CreatePartition(ctx, req.(*PartitionCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartitionService_GetPartition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartitionServiceServer).GetPartition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/partition.PartitionService/GetPartition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartitionServiceServer).GetPartition(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartitionService_UpdatePartition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PartitionUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartitionServiceServer).UpdatePartition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/partition.PartitionService/UpdatePartition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartitionServiceServer).UpdatePartition(ctx, req.(*PartitionUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartitionService_CreatePartitionRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PartitionRoleCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartitionServiceServer).CreatePartitionRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/partition.PartitionService/CreatePartitionRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartitionServiceServer).CreatePartitionRole(ctx, req.(*PartitionRoleCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartitionService_ListPartitionRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PartitionRoleListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartitionServiceServer).ListPartitionRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/partition.PartitionService/ListPartitionRoles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartitionServiceServer).ListPartitionRoles(ctx, req.(*PartitionRoleListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartitionService_RemovePartitionRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PartitionRoleRemoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartitionServiceServer).RemovePartitionRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/partition.PartitionService/RemovePartitionRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartitionServiceServer).RemovePartitionRole(ctx, req.(*PartitionRoleRemoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartitionService_CreatePage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartitionServiceServer).CreatePage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/partition.PartitionService/CreatePage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartitionServiceServer).CreatePage(ctx, req.(*PageCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartitionService_GetPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartitionServiceServer).GetPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/partition.PartitionService/GetPage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartitionServiceServer).GetPage(ctx, req.(*PageGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartitionService_RemovePage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageRemoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartitionServiceServer).RemovePage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/partition.PartitionService/RemovePage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartitionServiceServer).RemovePage(ctx, req.(*PageRemoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartitionService_CreateAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccessCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartitionServiceServer).CreateAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/partition.PartitionService/CreateAccess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartitionServiceServer).CreateAccess(ctx, req.(*AccessCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartitionService_GetAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccessGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartitionServiceServer).GetAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/partition.PartitionService/GetAccess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartitionServiceServer).GetAccess(ctx, req.(*AccessGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartitionService_RemoveAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccessRemoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartitionServiceServer).RemoveAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/partition.PartitionService/RemoveAccess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartitionServiceServer).RemoveAccess(ctx, req.(*AccessRemoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartitionService_CreateAccessRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccessRoleCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartitionServiceServer).CreateAccessRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/partition.PartitionService/CreateAccessRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartitionServiceServer).CreateAccessRole(ctx, req.(*AccessRoleCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartitionService_ListAccessRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccessRoleListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartitionServiceServer).ListAccessRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/partition.PartitionService/ListAccessRoles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartitionServiceServer).ListAccessRoles(ctx, req.(*AccessRoleListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartitionService_RemoveAccessRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccessRoleRemoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartitionServiceServer).RemoveAccessRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/partition.PartitionService/RemoveAccessRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartitionServiceServer).RemoveAccessRole(ctx, req.(*AccessRoleRemoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PartitionService_ServiceDesc is the grpc.ServiceDesc for PartitionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PartitionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "partition.PartitionService",
	HandlerType: (*PartitionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTenant",
			Handler:    _PartitionService_GetTenant_Handler,
		},
		{
			MethodName: "CreateTenant",
			Handler:    _PartitionService_CreateTenant_Handler,
		},
		{
			MethodName: "CreatePartition",
			Handler:    _PartitionService_CreatePartition_Handler,
		},
		{
			MethodName: "GetPartition",
			Handler:    _PartitionService_GetPartition_Handler,
		},
		{
			MethodName: "UpdatePartition",
			Handler:    _PartitionService_UpdatePartition_Handler,
		},
		{
			MethodName: "CreatePartitionRole",
			Handler:    _PartitionService_CreatePartitionRole_Handler,
		},
		{
			MethodName: "ListPartitionRoles",
			Handler:    _PartitionService_ListPartitionRoles_Handler,
		},
		{
			MethodName: "RemovePartitionRole",
			Handler:    _PartitionService_RemovePartitionRole_Handler,
		},
		{
			MethodName: "CreatePage",
			Handler:    _PartitionService_CreatePage_Handler,
		},
		{
			MethodName: "GetPage",
			Handler:    _PartitionService_GetPage_Handler,
		},
		{
			MethodName: "RemovePage",
			Handler:    _PartitionService_RemovePage_Handler,
		},
		{
			MethodName: "CreateAccess",
			Handler:    _PartitionService_CreateAccess_Handler,
		},
		{
			MethodName: "GetAccess",
			Handler:    _PartitionService_GetAccess_Handler,
		},
		{
			MethodName: "RemoveAccess",
			Handler:    _PartitionService_RemoveAccess_Handler,
		},
		{
			MethodName: "CreateAccessRole",
			Handler:    _PartitionService_CreateAccessRole_Handler,
		},
		{
			MethodName: "ListAccessRoles",
			Handler:    _PartitionService_ListAccessRoles_Handler,
		},
		{
			MethodName: "RemoveAccessRole",
			Handler:    _PartitionService_RemoveAccessRole_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListTenant",
			Handler:       _PartitionService_ListTenant_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListPartition",
			Handler:       _PartitionService_ListPartition_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "partition.proto",
}
