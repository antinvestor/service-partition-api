// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.18.0--rc2
// source: partition.proto

package partition_v1

import (
	common "github.com/antinvestor/apis/common"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Service wide response to show success on removal Of entry or failure
type RemoveResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Succeeded bool `protobuf:"varint,1,opt,name=succeeded,proto3" json:"succeeded,omitempty"`
}

func (x *RemoveResponse) Reset() {
	*x = RemoveResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_partition_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveResponse) ProtoMessage() {}

func (x *RemoveResponse) ProtoReflect() protoreflect.Message {
	mi := &file_partition_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveResponse.ProtoReflect.Descriptor instead.
func (*RemoveResponse) Descriptor() ([]byte, []int) {
	return file_partition_proto_rawDescGZIP(), []int{0}
}

func (x *RemoveResponse) GetSucceeded() bool {
	if x != nil {
		return x.Succeeded
	}
	return false
}

//Request to create new tenancy
type TenantRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description string            `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Properties  map[string]string `protobuf:"bytes,3,rep,name=properties,proto3" json:"properties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *TenantRequest) Reset() {
	*x = TenantRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_partition_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TenantRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TenantRequest) ProtoMessage() {}

func (x *TenantRequest) ProtoReflect() protoreflect.Message {
	mi := &file_partition_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TenantRequest.ProtoReflect.Descriptor instead.
func (*TenantRequest) Descriptor() ([]byte, []int) {
	return file_partition_proto_rawDescGZIP(), []int{1}
}

func (x *TenantRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TenantRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *TenantRequest) GetProperties() map[string]string {
	if x != nil {
		return x.Properties
	}
	return nil
}

type TenantObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TenantId    string            `protobuf:"bytes,1,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	Description string            `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Properties  map[string]string `protobuf:"bytes,3,rep,name=properties,proto3" json:"properties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *TenantObject) Reset() {
	*x = TenantObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_partition_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TenantObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TenantObject) ProtoMessage() {}

func (x *TenantObject) ProtoReflect() protoreflect.Message {
	mi := &file_partition_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TenantObject.ProtoReflect.Descriptor instead.
func (*TenantObject) Descriptor() ([]byte, []int) {
	return file_partition_proto_rawDescGZIP(), []int{2}
}

func (x *TenantObject) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *TenantObject) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *TenantObject) GetProperties() map[string]string {
	if x != nil {
		return x.Properties
	}
	return nil
}

//Request to create a new partition
type PartitionCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	TenantId    string            `protobuf:"bytes,2,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	ParentId    string            `protobuf:"bytes,3,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
	Description string            `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	Properties  map[string]string `protobuf:"bytes,5,rep,name=properties,proto3" json:"properties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PartitionCreateRequest) Reset() {
	*x = PartitionCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_partition_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartitionCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartitionCreateRequest) ProtoMessage() {}

func (x *PartitionCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_partition_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartitionCreateRequest.ProtoReflect.Descriptor instead.
func (*PartitionCreateRequest) Descriptor() ([]byte, []int) {
	return file_partition_proto_rawDescGZIP(), []int{3}
}

func (x *PartitionCreateRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PartitionCreateRequest) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *PartitionCreateRequest) GetParentId() string {
	if x != nil {
		return x.ParentId
	}
	return ""
}

func (x *PartitionCreateRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *PartitionCreateRequest) GetProperties() map[string]string {
	if x != nil {
		return x.Properties
	}
	return nil
}

type PartitionGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartitionId string `protobuf:"bytes,1,opt,name=partition_id,json=partitionId,proto3" json:"partition_id,omitempty"`
}

func (x *PartitionGetRequest) Reset() {
	*x = PartitionGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_partition_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartitionGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartitionGetRequest) ProtoMessage() {}

func (x *PartitionGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_partition_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartitionGetRequest.ProtoReflect.Descriptor instead.
func (*PartitionGetRequest) Descriptor() ([]byte, []int) {
	return file_partition_proto_rawDescGZIP(), []int{4}
}

func (x *PartitionGetRequest) GetPartitionId() string {
	if x != nil {
		return x.PartitionId
	}
	return ""
}

type PartitionUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartitionId string            `protobuf:"bytes,1,opt,name=partition_id,json=partitionId,proto3" json:"partition_id,omitempty"`
	Name        string            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description string            `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	State       common.STATE      `protobuf:"varint,4,opt,name=state,proto3,enum=apis.STATE" json:"state,omitempty"`
	Properties  map[string]string `protobuf:"bytes,5,rep,name=properties,proto3" json:"properties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PartitionUpdateRequest) Reset() {
	*x = PartitionUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_partition_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartitionUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartitionUpdateRequest) ProtoMessage() {}

func (x *PartitionUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_partition_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartitionUpdateRequest.ProtoReflect.Descriptor instead.
func (*PartitionUpdateRequest) Descriptor() ([]byte, []int) {
	return file_partition_proto_rawDescGZIP(), []int{5}
}

func (x *PartitionUpdateRequest) GetPartitionId() string {
	if x != nil {
		return x.PartitionId
	}
	return ""
}

func (x *PartitionUpdateRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PartitionUpdateRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *PartitionUpdateRequest) GetState() common.STATE {
	if x != nil {
		return x.State
	}
	return common.STATE(0)
}

func (x *PartitionUpdateRequest) GetProperties() map[string]string {
	if x != nil {
		return x.Properties
	}
	return nil
}

type PartitionObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartitionId string            `protobuf:"bytes,1,opt,name=partition_id,json=partitionId,proto3" json:"partition_id,omitempty"`
	Name        string            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	TenantId    string            `protobuf:"bytes,3,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	ParentId    string            `protobuf:"bytes,4,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
	Description string            `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	State       common.STATE      `protobuf:"varint,6,opt,name=state,proto3,enum=apis.STATE" json:"state,omitempty"`
	Properties  map[string]string `protobuf:"bytes,7,rep,name=properties,proto3" json:"properties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PartitionObject) Reset() {
	*x = PartitionObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_partition_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartitionObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartitionObject) ProtoMessage() {}

func (x *PartitionObject) ProtoReflect() protoreflect.Message {
	mi := &file_partition_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartitionObject.ProtoReflect.Descriptor instead.
func (*PartitionObject) Descriptor() ([]byte, []int) {
	return file_partition_proto_rawDescGZIP(), []int{6}
}

func (x *PartitionObject) GetPartitionId() string {
	if x != nil {
		return x.PartitionId
	}
	return ""
}

func (x *PartitionObject) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PartitionObject) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *PartitionObject) GetParentId() string {
	if x != nil {
		return x.ParentId
	}
	return ""
}

func (x *PartitionObject) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *PartitionObject) GetState() common.STATE {
	if x != nil {
		return x.State
	}
	return common.STATE(0)
}

func (x *PartitionObject) GetProperties() map[string]string {
	if x != nil {
		return x.Properties
	}
	return nil
}

// Partition Roles
type PartitionRoleCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartitionId string            `protobuf:"bytes,1,opt,name=partition_id,json=partitionId,proto3" json:"partition_id,omitempty"`
	Name        string            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Properties  map[string]string `protobuf:"bytes,3,rep,name=properties,proto3" json:"properties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PartitionRoleCreateRequest) Reset() {
	*x = PartitionRoleCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_partition_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartitionRoleCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartitionRoleCreateRequest) ProtoMessage() {}

func (x *PartitionRoleCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_partition_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartitionRoleCreateRequest.ProtoReflect.Descriptor instead.
func (*PartitionRoleCreateRequest) Descriptor() ([]byte, []int) {
	return file_partition_proto_rawDescGZIP(), []int{7}
}

func (x *PartitionRoleCreateRequest) GetPartitionId() string {
	if x != nil {
		return x.PartitionId
	}
	return ""
}

func (x *PartitionRoleCreateRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PartitionRoleCreateRequest) GetProperties() map[string]string {
	if x != nil {
		return x.Properties
	}
	return nil
}

type PartitionRoleObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartitionRoleId string            `protobuf:"bytes,1,opt,name=partition_role_id,json=partitionRoleId,proto3" json:"partition_role_id,omitempty"`
	PartitionId     string            `protobuf:"bytes,2,opt,name=partition_id,json=partitionId,proto3" json:"partition_id,omitempty"`
	Name            string            `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Properties      map[string]string `protobuf:"bytes,4,rep,name=properties,proto3" json:"properties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PartitionRoleObject) Reset() {
	*x = PartitionRoleObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_partition_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartitionRoleObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartitionRoleObject) ProtoMessage() {}

func (x *PartitionRoleObject) ProtoReflect() protoreflect.Message {
	mi := &file_partition_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartitionRoleObject.ProtoReflect.Descriptor instead.
func (*PartitionRoleObject) Descriptor() ([]byte, []int) {
	return file_partition_proto_rawDescGZIP(), []int{8}
}

func (x *PartitionRoleObject) GetPartitionRoleId() string {
	if x != nil {
		return x.PartitionRoleId
	}
	return ""
}

func (x *PartitionRoleObject) GetPartitionId() string {
	if x != nil {
		return x.PartitionId
	}
	return ""
}

func (x *PartitionRoleObject) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PartitionRoleObject) GetProperties() map[string]string {
	if x != nil {
		return x.Properties
	}
	return nil
}

type PartitionRoleRemoveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartitionRoleId string `protobuf:"bytes,1,opt,name=partition_role_id,json=partitionRoleId,proto3" json:"partition_role_id,omitempty"`
}

func (x *PartitionRoleRemoveRequest) Reset() {
	*x = PartitionRoleRemoveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_partition_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartitionRoleRemoveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartitionRoleRemoveRequest) ProtoMessage() {}

func (x *PartitionRoleRemoveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_partition_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartitionRoleRemoveRequest.ProtoReflect.Descriptor instead.
func (*PartitionRoleRemoveRequest) Descriptor() ([]byte, []int) {
	return file_partition_proto_rawDescGZIP(), []int{9}
}

func (x *PartitionRoleRemoveRequest) GetPartitionRoleId() string {
	if x != nil {
		return x.PartitionRoleId
	}
	return ""
}

type PartitionRoleListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartitionId string `protobuf:"bytes,1,opt,name=partition_id,json=partitionId,proto3" json:"partition_id,omitempty"`
}

func (x *PartitionRoleListRequest) Reset() {
	*x = PartitionRoleListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_partition_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartitionRoleListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartitionRoleListRequest) ProtoMessage() {}

func (x *PartitionRoleListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_partition_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartitionRoleListRequest.ProtoReflect.Descriptor instead.
func (*PartitionRoleListRequest) Descriptor() ([]byte, []int) {
	return file_partition_proto_rawDescGZIP(), []int{10}
}

func (x *PartitionRoleListRequest) GetPartitionId() string {
	if x != nil {
		return x.PartitionId
	}
	return ""
}

type PartitionRoleListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Role []*PartitionRoleObject `protobuf:"bytes,1,rep,name=role,proto3" json:"role,omitempty"`
}

func (x *PartitionRoleListResponse) Reset() {
	*x = PartitionRoleListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_partition_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartitionRoleListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartitionRoleListResponse) ProtoMessage() {}

func (x *PartitionRoleListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_partition_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartitionRoleListResponse.ProtoReflect.Descriptor instead.
func (*PartitionRoleListResponse) Descriptor() ([]byte, []int) {
	return file_partition_proto_rawDescGZIP(), []int{11}
}

func (x *PartitionRoleListResponse) GetRole() []*PartitionRoleObject {
	if x != nil {
		return x.Role
	}
	return nil
}

type PageObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageId string       `protobuf:"bytes,1,opt,name=page_id,json=pageId,proto3" json:"page_id,omitempty"`
	Name   string       `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Html   string       `protobuf:"bytes,3,opt,name=html,proto3" json:"html,omitempty"`
	State  common.STATE `protobuf:"varint,4,opt,name=state,proto3,enum=apis.STATE" json:"state,omitempty"`
}

func (x *PageObject) Reset() {
	*x = PageObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_partition_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PageObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PageObject) ProtoMessage() {}

func (x *PageObject) ProtoReflect() protoreflect.Message {
	mi := &file_partition_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PageObject.ProtoReflect.Descriptor instead.
func (*PageObject) Descriptor() ([]byte, []int) {
	return file_partition_proto_rawDescGZIP(), []int{12}
}

func (x *PageObject) GetPageId() string {
	if x != nil {
		return x.PageId
	}
	return ""
}

func (x *PageObject) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PageObject) GetHtml() string {
	if x != nil {
		return x.Html
	}
	return ""
}

func (x *PageObject) GetState() common.STATE {
	if x != nil {
		return x.State
	}
	return common.STATE(0)
}

type PageCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartitionId string `protobuf:"bytes,1,opt,name=partition_id,json=partitionId,proto3" json:"partition_id,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Html        string `protobuf:"bytes,3,opt,name=html,proto3" json:"html,omitempty"`
}

func (x *PageCreateRequest) Reset() {
	*x = PageCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_partition_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PageCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PageCreateRequest) ProtoMessage() {}

func (x *PageCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_partition_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PageCreateRequest.ProtoReflect.Descriptor instead.
func (*PageCreateRequest) Descriptor() ([]byte, []int) {
	return file_partition_proto_rawDescGZIP(), []int{13}
}

func (x *PageCreateRequest) GetPartitionId() string {
	if x != nil {
		return x.PartitionId
	}
	return ""
}

func (x *PageCreateRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PageCreateRequest) GetHtml() string {
	if x != nil {
		return x.Html
	}
	return ""
}

type PageGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageId      string `protobuf:"bytes,1,opt,name=page_id,json=pageId,proto3" json:"page_id,omitempty"`
	PartitionId string `protobuf:"bytes,2,opt,name=partition_id,json=partitionId,proto3" json:"partition_id,omitempty"`
	Name        string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *PageGetRequest) Reset() {
	*x = PageGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_partition_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PageGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PageGetRequest) ProtoMessage() {}

func (x *PageGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_partition_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PageGetRequest.ProtoReflect.Descriptor instead.
func (*PageGetRequest) Descriptor() ([]byte, []int) {
	return file_partition_proto_rawDescGZIP(), []int{14}
}

func (x *PageGetRequest) GetPageId() string {
	if x != nil {
		return x.PageId
	}
	return ""
}

func (x *PageGetRequest) GetPartitionId() string {
	if x != nil {
		return x.PartitionId
	}
	return ""
}

func (x *PageGetRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type PageRemoveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageId string `protobuf:"bytes,1,opt,name=page_id,json=pageId,proto3" json:"page_id,omitempty"`
}

func (x *PageRemoveRequest) Reset() {
	*x = PageRemoveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_partition_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PageRemoveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PageRemoveRequest) ProtoMessage() {}

func (x *PageRemoveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_partition_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PageRemoveRequest.ProtoReflect.Descriptor instead.
func (*PageRemoveRequest) Descriptor() ([]byte, []int) {
	return file_partition_proto_rawDescGZIP(), []int{15}
}

func (x *PageRemoveRequest) GetPageId() string {
	if x != nil {
		return x.PageId
	}
	return ""
}

type AccessObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessId  string           `protobuf:"bytes,1,opt,name=access_id,json=accessId,proto3" json:"access_id,omitempty"`
	ProfileId string           `protobuf:"bytes,2,opt,name=profile_id,json=profileId,proto3" json:"profile_id,omitempty"`
	Partition *PartitionObject `protobuf:"bytes,3,opt,name=partition,proto3" json:"partition,omitempty"`
	State     common.STATE     `protobuf:"varint,4,opt,name=state,proto3,enum=apis.STATE" json:"state,omitempty"`
}

func (x *AccessObject) Reset() {
	*x = AccessObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_partition_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessObject) ProtoMessage() {}

func (x *AccessObject) ProtoReflect() protoreflect.Message {
	mi := &file_partition_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessObject.ProtoReflect.Descriptor instead.
func (*AccessObject) Descriptor() ([]byte, []int) {
	return file_partition_proto_rawDescGZIP(), []int{16}
}

func (x *AccessObject) GetAccessId() string {
	if x != nil {
		return x.AccessId
	}
	return ""
}

func (x *AccessObject) GetProfileId() string {
	if x != nil {
		return x.ProfileId
	}
	return ""
}

func (x *AccessObject) GetPartition() *PartitionObject {
	if x != nil {
		return x.Partition
	}
	return nil
}

func (x *AccessObject) GetState() common.STATE {
	if x != nil {
		return x.State
	}
	return common.STATE(0)
}

type AccessCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartitionId string `protobuf:"bytes,1,opt,name=partition_id,json=partitionId,proto3" json:"partition_id,omitempty"`
	ProfileId   string `protobuf:"bytes,2,opt,name=profile_id,json=profileId,proto3" json:"profile_id,omitempty"`
}

func (x *AccessCreateRequest) Reset() {
	*x = AccessCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_partition_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessCreateRequest) ProtoMessage() {}

func (x *AccessCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_partition_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessCreateRequest.ProtoReflect.Descriptor instead.
func (*AccessCreateRequest) Descriptor() ([]byte, []int) {
	return file_partition_proto_rawDescGZIP(), []int{17}
}

func (x *AccessCreateRequest) GetPartitionId() string {
	if x != nil {
		return x.PartitionId
	}
	return ""
}

func (x *AccessCreateRequest) GetProfileId() string {
	if x != nil {
		return x.ProfileId
	}
	return ""
}

type AccessGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessId    string `protobuf:"bytes,1,opt,name=access_id,json=accessId,proto3" json:"access_id,omitempty"`
	PartitionId string `protobuf:"bytes,2,opt,name=partition_id,json=partitionId,proto3" json:"partition_id,omitempty"`
	ProfileId   string `protobuf:"bytes,3,opt,name=profile_id,json=profileId,proto3" json:"profile_id,omitempty"`
}

func (x *AccessGetRequest) Reset() {
	*x = AccessGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_partition_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessGetRequest) ProtoMessage() {}

func (x *AccessGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_partition_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessGetRequest.ProtoReflect.Descriptor instead.
func (*AccessGetRequest) Descriptor() ([]byte, []int) {
	return file_partition_proto_rawDescGZIP(), []int{18}
}

func (x *AccessGetRequest) GetAccessId() string {
	if x != nil {
		return x.AccessId
	}
	return ""
}

func (x *AccessGetRequest) GetPartitionId() string {
	if x != nil {
		return x.PartitionId
	}
	return ""
}

func (x *AccessGetRequest) GetProfileId() string {
	if x != nil {
		return x.ProfileId
	}
	return ""
}

type AccessRemoveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessId string `protobuf:"bytes,1,opt,name=access_id,json=accessId,proto3" json:"access_id,omitempty"`
}

func (x *AccessRemoveRequest) Reset() {
	*x = AccessRemoveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_partition_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessRemoveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessRemoveRequest) ProtoMessage() {}

func (x *AccessRemoveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_partition_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessRemoveRequest.ProtoReflect.Descriptor instead.
func (*AccessRemoveRequest) Descriptor() ([]byte, []int) {
	return file_partition_proto_rawDescGZIP(), []int{19}
}

func (x *AccessRemoveRequest) GetAccessId() string {
	if x != nil {
		return x.AccessId
	}
	return ""
}

// Access Roles
type AccessRoleCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessId        string `protobuf:"bytes,1,opt,name=access_id,json=accessId,proto3" json:"access_id,omitempty"`
	PartitionRoleId string `protobuf:"bytes,2,opt,name=partition_role_id,json=partitionRoleId,proto3" json:"partition_role_id,omitempty"`
}

func (x *AccessRoleCreateRequest) Reset() {
	*x = AccessRoleCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_partition_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessRoleCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessRoleCreateRequest) ProtoMessage() {}

func (x *AccessRoleCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_partition_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessRoleCreateRequest.ProtoReflect.Descriptor instead.
func (*AccessRoleCreateRequest) Descriptor() ([]byte, []int) {
	return file_partition_proto_rawDescGZIP(), []int{20}
}

func (x *AccessRoleCreateRequest) GetAccessId() string {
	if x != nil {
		return x.AccessId
	}
	return ""
}

func (x *AccessRoleCreateRequest) GetPartitionRoleId() string {
	if x != nil {
		return x.PartitionRoleId
	}
	return ""
}

type AccessRoleObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessRoleId string               `protobuf:"bytes,1,opt,name=access_role_id,json=accessRoleId,proto3" json:"access_role_id,omitempty"`
	AccessId     string               `protobuf:"bytes,2,opt,name=access_id,json=accessId,proto3" json:"access_id,omitempty"`
	Role         *PartitionRoleObject `protobuf:"bytes,3,opt,name=role,proto3" json:"role,omitempty"`
}

func (x *AccessRoleObject) Reset() {
	*x = AccessRoleObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_partition_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessRoleObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessRoleObject) ProtoMessage() {}

func (x *AccessRoleObject) ProtoReflect() protoreflect.Message {
	mi := &file_partition_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessRoleObject.ProtoReflect.Descriptor instead.
func (*AccessRoleObject) Descriptor() ([]byte, []int) {
	return file_partition_proto_rawDescGZIP(), []int{21}
}

func (x *AccessRoleObject) GetAccessRoleId() string {
	if x != nil {
		return x.AccessRoleId
	}
	return ""
}

func (x *AccessRoleObject) GetAccessId() string {
	if x != nil {
		return x.AccessId
	}
	return ""
}

func (x *AccessRoleObject) GetRole() *PartitionRoleObject {
	if x != nil {
		return x.Role
	}
	return nil
}

type AccessRoleRemoveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessRoleId string `protobuf:"bytes,1,opt,name=access_role_id,json=accessRoleId,proto3" json:"access_role_id,omitempty"`
}

func (x *AccessRoleRemoveRequest) Reset() {
	*x = AccessRoleRemoveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_partition_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessRoleRemoveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessRoleRemoveRequest) ProtoMessage() {}

func (x *AccessRoleRemoveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_partition_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessRoleRemoveRequest.ProtoReflect.Descriptor instead.
func (*AccessRoleRemoveRequest) Descriptor() ([]byte, []int) {
	return file_partition_proto_rawDescGZIP(), []int{22}
}

func (x *AccessRoleRemoveRequest) GetAccessRoleId() string {
	if x != nil {
		return x.AccessRoleId
	}
	return ""
}

type AccessRoleListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessId string `protobuf:"bytes,1,opt,name=access_id,json=accessId,proto3" json:"access_id,omitempty"`
}

func (x *AccessRoleListRequest) Reset() {
	*x = AccessRoleListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_partition_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessRoleListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessRoleListRequest) ProtoMessage() {}

func (x *AccessRoleListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_partition_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessRoleListRequest.ProtoReflect.Descriptor instead.
func (*AccessRoleListRequest) Descriptor() ([]byte, []int) {
	return file_partition_proto_rawDescGZIP(), []int{23}
}

func (x *AccessRoleListRequest) GetAccessId() string {
	if x != nil {
		return x.AccessId
	}
	return ""
}

type AccessRoleListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Role []*AccessRoleObject `protobuf:"bytes,1,rep,name=role,proto3" json:"role,omitempty"`
}

func (x *AccessRoleListResponse) Reset() {
	*x = AccessRoleListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_partition_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessRoleListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessRoleListResponse) ProtoMessage() {}

func (x *AccessRoleListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_partition_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessRoleListResponse.ProtoReflect.Descriptor instead.
func (*AccessRoleListResponse) Descriptor() ([]byte, []int) {
	return file_partition_proto_rawDescGZIP(), []int{24}
}

func (x *AccessRoleListResponse) GetRole() []*AccessRoleObject {
	if x != nil {
		return x.Role
	}
	return nil
}

var File_partition_proto protoreflect.FileDescriptor

var file_partition_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x04, 0x61, 0x70, 0x69, 0x73, 0x1a, 0x0e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x2e, 0x0a, 0x0e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x65, 0x64, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x65, 0x64, 0x65, 0x64, 0x22, 0xe0, 0x01, 0x0a, 0x0d, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x03, 0x18, 0x64,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07,
	0x72, 0x05, 0x10, 0x0a, 0x18, 0xf4, 0x03, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x70,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x1a, 0x3d, 0x0a, 0x0f, 0x50, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xf9, 0x01, 0x0a, 0x0c, 0x54, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0xfa, 0x42,
	0x18, 0x72, 0x16, 0x10, 0x03, 0x18, 0x28, 0x32, 0x10, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a,
	0x5f, 0x2d, 0x5d, 0x7b, 0x33, 0x2c, 0x32, 0x30, 0x7d, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10,
	0x0a, 0x18, 0xf4, 0x03, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x42, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x54, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x69, 0x65, 0x73, 0x1a, 0x3d, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0xe6, 0x02, 0x0a, 0x16, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1d, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xfa,
	0x42, 0x06, 0x72, 0x04, 0x10, 0x03, 0x18, 0x64, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x38,
	0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x1b, 0xfa, 0x42, 0x18, 0x72, 0x16, 0x10, 0x03, 0x18, 0x28, 0x32, 0x10, 0x5b, 0x30,
	0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x5f, 0x2d, 0x5d, 0x7b, 0x33, 0x2c, 0x32, 0x30, 0x7d, 0x52, 0x08,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0xfa, 0x42, 0x18,
	0x72, 0x16, 0x10, 0x03, 0x18, 0x28, 0x32, 0x10, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x5f,
	0x2d, 0x5d, 0x7b, 0x33, 0x2c, 0x32, 0x30, 0x7d, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x2c, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x0a,
	0x18, 0xfa, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x4c, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x1a, 0x3d,
	0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x55, 0x0a,
	0x13, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0xfa, 0x42, 0x18, 0x72,
	0x16, 0x10, 0x03, 0x18, 0x28, 0x32, 0x10, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x5f, 0x2d,
	0x5d, 0x7b, 0x33, 0x2c, 0x32, 0x30, 0x7d, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x22, 0xd5, 0x02, 0x0a, 0x16, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x3e, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0xfa, 0x42, 0x18, 0x72, 0x16, 0x10, 0x03, 0x18, 0x28,
	0x32, 0x10, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x5f, 0x2d, 0x5d, 0x7b, 0x33, 0x2c, 0x32,
	0x30, 0x7d, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xfa,
	0x42, 0x06, 0x72, 0x04, 0x10, 0x03, 0x18, 0x64, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2c,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x0a, 0x18, 0xf4, 0x03, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x61, 0x70,
	0x69, 0x73, 0x2e, 0x53, 0x54, 0x41, 0x54, 0x45, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x4c, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x1a, 0x3d, 0x0a,
	0x0f, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xbb, 0x03, 0x0a,
	0x0f, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x12, 0x3e, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0xfa, 0x42, 0x18, 0x72, 0x16, 0x10, 0x03, 0x18,
	0x28, 0x32, 0x10, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x5f, 0x2d, 0x5d, 0x7b, 0x33, 0x2c,
	0x32, 0x30, 0x7d, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09,
	0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x03, 0x18, 0x64, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x38, 0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x1b, 0xfa, 0x42, 0x18, 0x72, 0x16, 0x10, 0x03, 0x18, 0x28, 0x32, 0x10, 0x5b,
	0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x5f, 0x2d, 0x5d, 0x7b, 0x33, 0x2c, 0x32, 0x30, 0x7d, 0x52,
	0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0xfa, 0x42,
	0x18, 0x72, 0x16, 0x10, 0x03, 0x18, 0x28, 0x32, 0x10, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a,
	0x5f, 0x2d, 0x5d, 0x7b, 0x33, 0x2c, 0x32, 0x30, 0x7d, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10,
	0x0a, 0x18, 0xf4, 0x03, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x21, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0b, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x53, 0x54, 0x41, 0x54, 0x45, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x45, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69,
	0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e,
	0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x1a, 0x3d, 0x0a, 0x0f, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x8c, 0x02, 0x0a, 0x1a, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x6c, 0x65, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x0c, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x1b, 0xfa, 0x42, 0x18, 0x72, 0x16, 0x10, 0x03, 0x18, 0x28, 0x32, 0x10, 0x5b, 0x30, 0x2d, 0x39,
	0x61, 0x2d, 0x7a, 0x5f, 0x2d, 0x5d, 0x7b, 0x33, 0x2c, 0x32, 0x30, 0x7d, 0x52, 0x0b, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x03,
	0x18, 0x64, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x50, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x6c,
	0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a,
	0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x1a, 0x3d, 0x0a, 0x0f, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc7, 0x02, 0x0a, 0x13, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x6c, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x12, 0x47, 0x0a, 0x11, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72,
	0x6f, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0xfa, 0x42,
	0x18, 0x72, 0x16, 0x10, 0x03, 0x18, 0x28, 0x32, 0x10, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a,
	0x5f, 0x2d, 0x5d, 0x7b, 0x33, 0x2c, 0x32, 0x30, 0x7d, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x0c, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x1b, 0xfa, 0x42, 0x18, 0x72, 0x16, 0x10, 0x03, 0x18, 0x28, 0x32, 0x10, 0x5b, 0x30, 0x2d,
	0x39, 0x61, 0x2d, 0x7a, 0x5f, 0x2d, 0x5d, 0x7b, 0x33, 0x2c, 0x32, 0x30, 0x7d, 0x52, 0x0b, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10,
	0x03, 0x18, 0x64, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x49, 0x0a, 0x0a, 0x70, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f,
	0x6c, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x69, 0x65, 0x73, 0x1a, 0x3d, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x65, 0x0a, 0x1a, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x47, 0x0a, 0x11, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72,
	0x6f, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0xfa, 0x42,
	0x18, 0x72, 0x16, 0x10, 0x03, 0x18, 0x28, 0x32, 0x10, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a,
	0x5f, 0x2d, 0x5d, 0x7b, 0x33, 0x2c, 0x32, 0x30, 0x7d, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x5a, 0x0a, 0x18, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0xfa, 0x42,
	0x18, 0x72, 0x16, 0x10, 0x03, 0x18, 0x28, 0x32, 0x10, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a,
	0x5f, 0x2d, 0x5d, 0x7b, 0x33, 0x2c, 0x32, 0x30, 0x7d, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x4a, 0x0a, 0x19, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x6f, 0x6c, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x04, 0x72, 0x6f,
	0x6c, 0x65, 0x22, 0xa4, 0x01, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x12, 0x34, 0x0a, 0x07, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x1b, 0xfa, 0x42, 0x18, 0x72, 0x16, 0x10, 0x03, 0x18, 0x28, 0x32, 0x10, 0x5b,
	0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x5f, 0x2d, 0x5d, 0x7b, 0x33, 0x2c, 0x32, 0x30, 0x7d, 0x52,
	0x06, 0x70, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x03, 0x18, 0x64,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x04, 0x68, 0x74, 0x6d, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x04, 0x18, 0x88, 0x27,
	0x52, 0x04, 0x68, 0x74, 0x6d, 0x6c, 0x12, 0x21, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x92, 0x01, 0x0a, 0x11, 0x50, 0x61,
	0x67, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x3e, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0xfa, 0x42, 0x18, 0x72, 0x16, 0x10, 0x03, 0x18, 0x28,
	0x32, 0x10, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x5f, 0x2d, 0x5d, 0x7b, 0x33, 0x2c, 0x32,
	0x30, 0x7d, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xfa,
	0x42, 0x06, 0x72, 0x04, 0x10, 0x03, 0x18, 0x64, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e,
	0x0a, 0x04, 0x68, 0x74, 0x6d, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42,
	0x07, 0x72, 0x05, 0x10, 0x04, 0x18, 0x88, 0x27, 0x52, 0x04, 0x68, 0x74, 0x6d, 0x6c, 0x22, 0xae,
	0x01, 0x0a, 0x0e, 0x50, 0x61, 0x67, 0x65, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x37, 0x0a, 0x07, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x1e, 0xfa, 0x42, 0x1b, 0x72, 0x19, 0x10, 0x03, 0x18, 0x28, 0x32, 0x10, 0x5b,
	0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x5f, 0x2d, 0x5d, 0x7b, 0x33, 0x2c, 0x32, 0x30, 0x7d, 0xd0,
	0x01, 0x01, 0x52, 0x06, 0x70, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x0c, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x1e, 0xfa, 0x42, 0x1b, 0x72, 0x19, 0x10, 0x03, 0x18, 0x28, 0x32, 0x10, 0x5b, 0x30, 0x2d,
	0x39, 0x61, 0x2d, 0x7a, 0x5f, 0x2d, 0x5d, 0x7b, 0x33, 0x2c, 0x32, 0x30, 0x7d, 0xd0, 0x01, 0x01,
	0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x20, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xfa, 0x42, 0x09,
	0x72, 0x07, 0x10, 0x03, 0x18, 0x64, 0xd0, 0x01, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0x49, 0x0a, 0x11, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x07, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0xfa, 0x42, 0x18, 0x72, 0x16, 0x10, 0x03, 0x18, 0x28,
	0x32, 0x10, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x5f, 0x2d, 0x5d, 0x7b, 0x33, 0x2c, 0x32,
	0x30, 0x7d, 0x52, 0x06, 0x70, 0x61, 0x67, 0x65, 0x49, 0x64, 0x22, 0xdc, 0x01, 0x0a, 0x0c, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b,
	0xfa, 0x42, 0x18, 0x72, 0x16, 0x10, 0x03, 0x18, 0x28, 0x32, 0x10, 0x5b, 0x30, 0x2d, 0x39, 0x61,
	0x2d, 0x7a, 0x5f, 0x2d, 0x5d, 0x7b, 0x33, 0x2c, 0x32, 0x30, 0x7d, 0x52, 0x08, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0xfa, 0x42, 0x18, 0x72, 0x16,
	0x10, 0x03, 0x18, 0x28, 0x32, 0x10, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x5f, 0x2d, 0x5d,
	0x7b, 0x33, 0x2c, 0x32, 0x30, 0x7d, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49,
	0x64, 0x12, 0x33, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x09, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x91, 0x01, 0x0a, 0x13, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x3e, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0xfa, 0x42, 0x18, 0x72, 0x16, 0x10, 0x03,
	0x18, 0x28, 0x32, 0x10, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x5f, 0x2d, 0x5d, 0x7b, 0x33,
	0x2c, 0x32, 0x30, 0x7d, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x3a, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0xfa, 0x42, 0x18, 0x72, 0x16, 0x10, 0x03, 0x18, 0x28,
	0x32, 0x10, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x5f, 0x2d, 0x5d, 0x7b, 0x33, 0x2c, 0x32,
	0x30, 0x7d, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x22, 0xd1, 0x01,
	0x0a, 0x10, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x3b, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0xfa, 0x42, 0x1b, 0x72, 0x19, 0x10, 0x03, 0x18, 0x28,
	0x32, 0x10, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x5f, 0x2d, 0x5d, 0x7b, 0x33, 0x2c, 0x32,
	0x30, 0x7d, 0xd0, 0x01, 0x01, 0x52, 0x08, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12,
	0x41, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0xfa, 0x42, 0x1b, 0x72, 0x19, 0x10, 0x03, 0x18, 0x28,
	0x32, 0x10, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x5f, 0x2d, 0x5d, 0x7b, 0x33, 0x2c, 0x32,
	0x30, 0x7d, 0xd0, 0x01, 0x01, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x3d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0xfa, 0x42, 0x1b, 0x72, 0x19, 0x10, 0x03, 0x18,
	0x28, 0x32, 0x10, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x5f, 0x2d, 0x5d, 0x7b, 0x33, 0x2c,
	0x32, 0x30, 0x7d, 0xd0, 0x01, 0x01, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49,
	0x64, 0x22, 0x4f, 0x0a, 0x13, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0xfa, 0x42, 0x18,
	0x72, 0x16, 0x10, 0x03, 0x18, 0x28, 0x32, 0x10, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x5f,
	0x2d, 0x5d, 0x7b, 0x33, 0x2c, 0x32, 0x30, 0x7d, 0x52, 0x08, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x49, 0x64, 0x22, 0x9c, 0x01, 0x0a, 0x17, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x6f, 0x6c,
	0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38,
	0x0a, 0x09, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x1b, 0xfa, 0x42, 0x18, 0x72, 0x16, 0x10, 0x03, 0x18, 0x28, 0x32, 0x10, 0x5b, 0x30,
	0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x5f, 0x2d, 0x5d, 0x7b, 0x33, 0x2c, 0x32, 0x30, 0x7d, 0x52, 0x08,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x47, 0x0a, 0x11, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x1b, 0xfa, 0x42, 0x18, 0x72, 0x16, 0x10, 0x03, 0x18, 0x28, 0x32, 0x10,
	0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x5f, 0x2d, 0x5d, 0x7b, 0x33, 0x2c, 0x32, 0x30, 0x7d,
	0x52, 0x0f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x6c, 0x65, 0x49,
	0x64, 0x22, 0xbe, 0x01, 0x0a, 0x10, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x6f, 0x6c, 0x65,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x41, 0x0a, 0x0e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b,
	0xfa, 0x42, 0x18, 0x72, 0x16, 0x10, 0x03, 0x18, 0x28, 0x32, 0x10, 0x5b, 0x30, 0x2d, 0x39, 0x61,
	0x2d, 0x7a, 0x5f, 0x2d, 0x5d, 0x7b, 0x33, 0x2c, 0x32, 0x30, 0x7d, 0x52, 0x0c, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x52, 0x6f, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0xfa, 0x42,
	0x18, 0x72, 0x16, 0x10, 0x03, 0x18, 0x28, 0x32, 0x10, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a,
	0x5f, 0x2d, 0x5d, 0x7b, 0x33, 0x2c, 0x32, 0x30, 0x7d, 0x52, 0x08, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x6f, 0x6c, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x04, 0x72, 0x6f,
	0x6c, 0x65, 0x22, 0x5c, 0x0a, 0x17, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x6f, 0x6c, 0x65,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a,
	0x0e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0xfa, 0x42, 0x18, 0x72, 0x16, 0x10, 0x03, 0x18, 0x28,
	0x32, 0x10, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a, 0x5f, 0x2d, 0x5d, 0x7b, 0x33, 0x2c, 0x32,
	0x30, 0x7d, 0x52, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x6f, 0x6c, 0x65, 0x49, 0x64,
	0x22, 0x51, 0x0a, 0x15, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x6f, 0x6c, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0xfa, 0x42,
	0x18, 0x72, 0x16, 0x10, 0x03, 0x18, 0x28, 0x32, 0x10, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x7a,
	0x5f, 0x2d, 0x5d, 0x7b, 0x33, 0x2c, 0x32, 0x30, 0x7d, 0x52, 0x08, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x49, 0x64, 0x22, 0x44, 0x0a, 0x16, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x6f, 0x6c,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a,
	0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x70,
	0x69, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x6f, 0x6c, 0x65, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x32, 0xdb, 0x08, 0x0a, 0x10, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x37,
	0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x12, 0x13,
	0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x54, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x46, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x2e, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12,
	0x40, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x19, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x12, 0x46, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x15, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x52, 0x0a, 0x13, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x6c, 0x65,
	0x12, 0x20, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x6f, 0x6c, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x6c, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x55, 0x0a,
	0x12, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f,
	0x6c, 0x65, 0x73, 0x12, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x13, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x20, 0x2e, 0x61, 0x70,
	0x69, 0x73, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x6c, 0x65,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x67,
	0x65, 0x12, 0x17, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x31, 0x0a, 0x07,
	0x47, 0x65, 0x74, 0x50, 0x61, 0x67, 0x65, 0x12, 0x14, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x50,
	0x61, 0x67, 0x65, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12,
	0x3b, 0x0a, 0x0a, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x61, 0x67, 0x65, 0x12, 0x17, 0x2e,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x0c,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x19, 0x2e, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x37, 0x0a, 0x09, 0x47,
	0x65, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x16, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x12, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x12, 0x3f, 0x0a, 0x0c, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x12, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x14, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x73,
	0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x6f, 0x6c, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x6f, 0x6c, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x12, 0x4c, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x6f,
	0x6c, 0x65, 0x73, 0x12, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x52, 0x6f, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x6f,
	0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47,
	0x0a, 0x10, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x6f,
	0x6c, 0x65, 0x12, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x14, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x10, 0x5a, 0x0e, 0x2e, 0x3b, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_partition_proto_rawDescOnce sync.Once
	file_partition_proto_rawDescData = file_partition_proto_rawDesc
)

func file_partition_proto_rawDescGZIP() []byte {
	file_partition_proto_rawDescOnce.Do(func() {
		file_partition_proto_rawDescData = protoimpl.X.CompressGZIP(file_partition_proto_rawDescData)
	})
	return file_partition_proto_rawDescData
}

var file_partition_proto_msgTypes = make([]protoimpl.MessageInfo, 32)
var file_partition_proto_goTypes = []interface{}{
	(*RemoveResponse)(nil),             // 0: apis.RemoveResponse
	(*TenantRequest)(nil),              // 1: apis.TenantRequest
	(*TenantObject)(nil),               // 2: apis.TenantObject
	(*PartitionCreateRequest)(nil),     // 3: apis.PartitionCreateRequest
	(*PartitionGetRequest)(nil),        // 4: apis.PartitionGetRequest
	(*PartitionUpdateRequest)(nil),     // 5: apis.PartitionUpdateRequest
	(*PartitionObject)(nil),            // 6: apis.PartitionObject
	(*PartitionRoleCreateRequest)(nil), // 7: apis.PartitionRoleCreateRequest
	(*PartitionRoleObject)(nil),        // 8: apis.PartitionRoleObject
	(*PartitionRoleRemoveRequest)(nil), // 9: apis.PartitionRoleRemoveRequest
	(*PartitionRoleListRequest)(nil),   // 10: apis.PartitionRoleListRequest
	(*PartitionRoleListResponse)(nil),  // 11: apis.PartitionRoleListResponse
	(*PageObject)(nil),                 // 12: apis.PageObject
	(*PageCreateRequest)(nil),          // 13: apis.PageCreateRequest
	(*PageGetRequest)(nil),             // 14: apis.PageGetRequest
	(*PageRemoveRequest)(nil),          // 15: apis.PageRemoveRequest
	(*AccessObject)(nil),               // 16: apis.AccessObject
	(*AccessCreateRequest)(nil),        // 17: apis.AccessCreateRequest
	(*AccessGetRequest)(nil),           // 18: apis.AccessGetRequest
	(*AccessRemoveRequest)(nil),        // 19: apis.AccessRemoveRequest
	(*AccessRoleCreateRequest)(nil),    // 20: apis.AccessRoleCreateRequest
	(*AccessRoleObject)(nil),           // 21: apis.AccessRoleObject
	(*AccessRoleRemoveRequest)(nil),    // 22: apis.AccessRoleRemoveRequest
	(*AccessRoleListRequest)(nil),      // 23: apis.AccessRoleListRequest
	(*AccessRoleListResponse)(nil),     // 24: apis.AccessRoleListResponse
	nil,                                // 25: apis.TenantRequest.PropertiesEntry
	nil,                                // 26: apis.TenantObject.PropertiesEntry
	nil,                                // 27: apis.PartitionCreateRequest.PropertiesEntry
	nil,                                // 28: apis.PartitionUpdateRequest.PropertiesEntry
	nil,                                // 29: apis.PartitionObject.PropertiesEntry
	nil,                                // 30: apis.PartitionRoleCreateRequest.PropertiesEntry
	nil,                                // 31: apis.PartitionRoleObject.PropertiesEntry
	(common.STATE)(0),                  // 32: apis.STATE
}
var file_partition_proto_depIdxs = []int32{
	25, // 0: apis.TenantRequest.properties:type_name -> apis.TenantRequest.PropertiesEntry
	26, // 1: apis.TenantObject.properties:type_name -> apis.TenantObject.PropertiesEntry
	27, // 2: apis.PartitionCreateRequest.properties:type_name -> apis.PartitionCreateRequest.PropertiesEntry
	32, // 3: apis.PartitionUpdateRequest.state:type_name -> apis.STATE
	28, // 4: apis.PartitionUpdateRequest.properties:type_name -> apis.PartitionUpdateRequest.PropertiesEntry
	32, // 5: apis.PartitionObject.state:type_name -> apis.STATE
	29, // 6: apis.PartitionObject.properties:type_name -> apis.PartitionObject.PropertiesEntry
	30, // 7: apis.PartitionRoleCreateRequest.properties:type_name -> apis.PartitionRoleCreateRequest.PropertiesEntry
	31, // 8: apis.PartitionRoleObject.properties:type_name -> apis.PartitionRoleObject.PropertiesEntry
	8,  // 9: apis.PartitionRoleListResponse.role:type_name -> apis.PartitionRoleObject
	32, // 10: apis.PageObject.state:type_name -> apis.STATE
	6,  // 11: apis.AccessObject.partition:type_name -> apis.PartitionObject
	32, // 12: apis.AccessObject.state:type_name -> apis.STATE
	8,  // 13: apis.AccessRoleObject.role:type_name -> apis.PartitionRoleObject
	21, // 14: apis.AccessRoleListResponse.role:type_name -> apis.AccessRoleObject
	1,  // 15: apis.PartitionService.CreateTenant:input_type -> apis.TenantRequest
	3,  // 16: apis.PartitionService.CreatePartition:input_type -> apis.PartitionCreateRequest
	4,  // 17: apis.PartitionService.GetPartition:input_type -> apis.PartitionGetRequest
	5,  // 18: apis.PartitionService.UpdatePartition:input_type -> apis.PartitionUpdateRequest
	7,  // 19: apis.PartitionService.CreatePartitionRole:input_type -> apis.PartitionRoleCreateRequest
	10, // 20: apis.PartitionService.ListPartitionRoles:input_type -> apis.PartitionRoleListRequest
	9,  // 21: apis.PartitionService.RemovePartitionRole:input_type -> apis.PartitionRoleRemoveRequest
	13, // 22: apis.PartitionService.CreatePage:input_type -> apis.PageCreateRequest
	14, // 23: apis.PartitionService.GetPage:input_type -> apis.PageGetRequest
	15, // 24: apis.PartitionService.RemovePage:input_type -> apis.PageRemoveRequest
	17, // 25: apis.PartitionService.CreateAccess:input_type -> apis.AccessCreateRequest
	18, // 26: apis.PartitionService.GetAccess:input_type -> apis.AccessGetRequest
	19, // 27: apis.PartitionService.RemoveAccess:input_type -> apis.AccessRemoveRequest
	20, // 28: apis.PartitionService.CreateAccessRole:input_type -> apis.AccessRoleCreateRequest
	23, // 29: apis.PartitionService.ListAccessRoles:input_type -> apis.AccessRoleListRequest
	22, // 30: apis.PartitionService.RemoveAccessRole:input_type -> apis.AccessRoleRemoveRequest
	2,  // 31: apis.PartitionService.CreateTenant:output_type -> apis.TenantObject
	6,  // 32: apis.PartitionService.CreatePartition:output_type -> apis.PartitionObject
	6,  // 33: apis.PartitionService.GetPartition:output_type -> apis.PartitionObject
	6,  // 34: apis.PartitionService.UpdatePartition:output_type -> apis.PartitionObject
	8,  // 35: apis.PartitionService.CreatePartitionRole:output_type -> apis.PartitionRoleObject
	11, // 36: apis.PartitionService.ListPartitionRoles:output_type -> apis.PartitionRoleListResponse
	0,  // 37: apis.PartitionService.RemovePartitionRole:output_type -> apis.RemoveResponse
	12, // 38: apis.PartitionService.CreatePage:output_type -> apis.PageObject
	12, // 39: apis.PartitionService.GetPage:output_type -> apis.PageObject
	0,  // 40: apis.PartitionService.RemovePage:output_type -> apis.RemoveResponse
	16, // 41: apis.PartitionService.CreateAccess:output_type -> apis.AccessObject
	16, // 42: apis.PartitionService.GetAccess:output_type -> apis.AccessObject
	0,  // 43: apis.PartitionService.RemoveAccess:output_type -> apis.RemoveResponse
	21, // 44: apis.PartitionService.CreateAccessRole:output_type -> apis.AccessRoleObject
	24, // 45: apis.PartitionService.ListAccessRoles:output_type -> apis.AccessRoleListResponse
	0,  // 46: apis.PartitionService.RemoveAccessRole:output_type -> apis.RemoveResponse
	31, // [31:47] is the sub-list for method output_type
	15, // [15:31] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_partition_proto_init() }
func file_partition_proto_init() {
	if File_partition_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_partition_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_partition_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TenantRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_partition_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TenantObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_partition_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartitionCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_partition_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartitionGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_partition_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartitionUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_partition_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartitionObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_partition_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartitionRoleCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_partition_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartitionRoleObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_partition_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartitionRoleRemoveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_partition_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartitionRoleListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_partition_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartitionRoleListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_partition_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PageObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_partition_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PageCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_partition_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PageGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_partition_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PageRemoveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_partition_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_partition_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_partition_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_partition_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessRemoveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_partition_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessRoleCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_partition_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessRoleObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_partition_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessRoleRemoveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_partition_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessRoleListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_partition_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessRoleListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_partition_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   32,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_partition_proto_goTypes,
		DependencyIndexes: file_partition_proto_depIdxs,
		MessageInfos:      file_partition_proto_msgTypes,
	}.Build()
	File_partition_proto = out.File
	file_partition_proto_rawDesc = nil
	file_partition_proto_goTypes = nil
	file_partition_proto_depIdxs = nil
}
