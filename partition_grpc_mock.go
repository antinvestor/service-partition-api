// Code generated by MockGen. DO NOT EDIT.
// Source: partition_grpc.pb.go

// Package partitionv1 is a generated GoMock package.
package partitionv1

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
)

// MockPartitionServiceClient is a mock of PartitionServiceClient interface.
type MockPartitionServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockPartitionServiceClientMockRecorder
}

// MockPartitionServiceClientMockRecorder is the mock recorder for MockPartitionServiceClient.
type MockPartitionServiceClientMockRecorder struct {
	mock *MockPartitionServiceClient
}

// NewMockPartitionServiceClient creates a new mock instance.
func NewMockPartitionServiceClient(ctrl *gomock.Controller) *MockPartitionServiceClient {
	mock := &MockPartitionServiceClient{ctrl: ctrl}
	mock.recorder = &MockPartitionServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPartitionServiceClient) EXPECT() *MockPartitionServiceClientMockRecorder {
	return m.recorder
}

// CreateAccess mocks base method.
func (m *MockPartitionServiceClient) CreateAccess(ctx context.Context, in *AccessCreateRequest, opts ...grpc.CallOption) (*AccessObject, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateAccess", varargs...)
	ret0, _ := ret[0].(*AccessObject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccess indicates an expected call of CreateAccess.
func (mr *MockPartitionServiceClientMockRecorder) CreateAccess(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccess", reflect.TypeOf((*MockPartitionServiceClient)(nil).CreateAccess), varargs...)
}

// CreateAccessRole mocks base method.
func (m *MockPartitionServiceClient) CreateAccessRole(ctx context.Context, in *AccessRoleCreateRequest, opts ...grpc.CallOption) (*AccessRoleObject, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateAccessRole", varargs...)
	ret0, _ := ret[0].(*AccessRoleObject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccessRole indicates an expected call of CreateAccessRole.
func (mr *MockPartitionServiceClientMockRecorder) CreateAccessRole(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccessRole", reflect.TypeOf((*MockPartitionServiceClient)(nil).CreateAccessRole), varargs...)
}

// CreatePage mocks base method.
func (m *MockPartitionServiceClient) CreatePage(ctx context.Context, in *PageCreateRequest, opts ...grpc.CallOption) (*PageObject, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreatePage", varargs...)
	ret0, _ := ret[0].(*PageObject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePage indicates an expected call of CreatePage.
func (mr *MockPartitionServiceClientMockRecorder) CreatePage(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePage", reflect.TypeOf((*MockPartitionServiceClient)(nil).CreatePage), varargs...)
}

// CreatePartition mocks base method.
func (m *MockPartitionServiceClient) CreatePartition(ctx context.Context, in *PartitionCreateRequest, opts ...grpc.CallOption) (*PartitionObject, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreatePartition", varargs...)
	ret0, _ := ret[0].(*PartitionObject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePartition indicates an expected call of CreatePartition.
func (mr *MockPartitionServiceClientMockRecorder) CreatePartition(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePartition", reflect.TypeOf((*MockPartitionServiceClient)(nil).CreatePartition), varargs...)
}

// CreatePartitionRole mocks base method.
func (m *MockPartitionServiceClient) CreatePartitionRole(ctx context.Context, in *PartitionRoleCreateRequest, opts ...grpc.CallOption) (*PartitionRoleObject, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreatePartitionRole", varargs...)
	ret0, _ := ret[0].(*PartitionRoleObject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePartitionRole indicates an expected call of CreatePartitionRole.
func (mr *MockPartitionServiceClientMockRecorder) CreatePartitionRole(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePartitionRole", reflect.TypeOf((*MockPartitionServiceClient)(nil).CreatePartitionRole), varargs...)
}

// CreateTenant mocks base method.
func (m *MockPartitionServiceClient) CreateTenant(ctx context.Context, in *TenantRequest, opts ...grpc.CallOption) (*TenantObject, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateTenant", varargs...)
	ret0, _ := ret[0].(*TenantObject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTenant indicates an expected call of CreateTenant.
func (mr *MockPartitionServiceClientMockRecorder) CreateTenant(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTenant", reflect.TypeOf((*MockPartitionServiceClient)(nil).CreateTenant), varargs...)
}

// GetAccess mocks base method.
func (m *MockPartitionServiceClient) GetAccess(ctx context.Context, in *AccessGetRequest, opts ...grpc.CallOption) (*AccessObject, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAccess", varargs...)
	ret0, _ := ret[0].(*AccessObject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccess indicates an expected call of GetAccess.
func (mr *MockPartitionServiceClientMockRecorder) GetAccess(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccess", reflect.TypeOf((*MockPartitionServiceClient)(nil).GetAccess), varargs...)
}

// GetPage mocks base method.
func (m *MockPartitionServiceClient) GetPage(ctx context.Context, in *PageGetRequest, opts ...grpc.CallOption) (*PageObject, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPage", varargs...)
	ret0, _ := ret[0].(*PageObject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPage indicates an expected call of GetPage.
func (mr *MockPartitionServiceClientMockRecorder) GetPage(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPage", reflect.TypeOf((*MockPartitionServiceClient)(nil).GetPage), varargs...)
}

// GetPartition mocks base method.
func (m *MockPartitionServiceClient) GetPartition(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*PartitionObject, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPartition", varargs...)
	ret0, _ := ret[0].(*PartitionObject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPartition indicates an expected call of GetPartition.
func (mr *MockPartitionServiceClientMockRecorder) GetPartition(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPartition", reflect.TypeOf((*MockPartitionServiceClient)(nil).GetPartition), varargs...)
}

// GetTenant mocks base method.
func (m *MockPartitionServiceClient) GetTenant(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*TenantObject, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTenant", varargs...)
	ret0, _ := ret[0].(*TenantObject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTenant indicates an expected call of GetTenant.
func (mr *MockPartitionServiceClientMockRecorder) GetTenant(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTenant", reflect.TypeOf((*MockPartitionServiceClient)(nil).GetTenant), varargs...)
}

// ListAccessRoles mocks base method.
func (m *MockPartitionServiceClient) ListAccessRoles(ctx context.Context, in *AccessRoleListRequest, opts ...grpc.CallOption) (*AccessRoleListResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAccessRoles", varargs...)
	ret0, _ := ret[0].(*AccessRoleListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAccessRoles indicates an expected call of ListAccessRoles.
func (mr *MockPartitionServiceClientMockRecorder) ListAccessRoles(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccessRoles", reflect.TypeOf((*MockPartitionServiceClient)(nil).ListAccessRoles), varargs...)
}

// ListPartition mocks base method.
func (m *MockPartitionServiceClient) ListPartition(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (PartitionService_ListPartitionClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPartition", varargs...)
	ret0, _ := ret[0].(PartitionService_ListPartitionClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPartition indicates an expected call of ListPartition.
func (mr *MockPartitionServiceClientMockRecorder) ListPartition(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPartition", reflect.TypeOf((*MockPartitionServiceClient)(nil).ListPartition), varargs...)
}

// ListPartitionRoles mocks base method.
func (m *MockPartitionServiceClient) ListPartitionRoles(ctx context.Context, in *PartitionRoleListRequest, opts ...grpc.CallOption) (*PartitionRoleListResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPartitionRoles", varargs...)
	ret0, _ := ret[0].(*PartitionRoleListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPartitionRoles indicates an expected call of ListPartitionRoles.
func (mr *MockPartitionServiceClientMockRecorder) ListPartitionRoles(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPartitionRoles", reflect.TypeOf((*MockPartitionServiceClient)(nil).ListPartitionRoles), varargs...)
}

// ListTenant mocks base method.
func (m *MockPartitionServiceClient) ListTenant(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (PartitionService_ListTenantClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTenant", varargs...)
	ret0, _ := ret[0].(PartitionService_ListTenantClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTenant indicates an expected call of ListTenant.
func (mr *MockPartitionServiceClientMockRecorder) ListTenant(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTenant", reflect.TypeOf((*MockPartitionServiceClient)(nil).ListTenant), varargs...)
}

// RemoveAccess mocks base method.
func (m *MockPartitionServiceClient) RemoveAccess(ctx context.Context, in *AccessRemoveRequest, opts ...grpc.CallOption) (*RemoveResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveAccess", varargs...)
	ret0, _ := ret[0].(*RemoveResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveAccess indicates an expected call of RemoveAccess.
func (mr *MockPartitionServiceClientMockRecorder) RemoveAccess(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveAccess", reflect.TypeOf((*MockPartitionServiceClient)(nil).RemoveAccess), varargs...)
}

// RemoveAccessRole mocks base method.
func (m *MockPartitionServiceClient) RemoveAccessRole(ctx context.Context, in *AccessRoleRemoveRequest, opts ...grpc.CallOption) (*RemoveResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveAccessRole", varargs...)
	ret0, _ := ret[0].(*RemoveResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveAccessRole indicates an expected call of RemoveAccessRole.
func (mr *MockPartitionServiceClientMockRecorder) RemoveAccessRole(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveAccessRole", reflect.TypeOf((*MockPartitionServiceClient)(nil).RemoveAccessRole), varargs...)
}

// RemovePage mocks base method.
func (m *MockPartitionServiceClient) RemovePage(ctx context.Context, in *PageRemoveRequest, opts ...grpc.CallOption) (*RemoveResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemovePage", varargs...)
	ret0, _ := ret[0].(*RemoveResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemovePage indicates an expected call of RemovePage.
func (mr *MockPartitionServiceClientMockRecorder) RemovePage(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemovePage", reflect.TypeOf((*MockPartitionServiceClient)(nil).RemovePage), varargs...)
}

// RemovePartitionRole mocks base method.
func (m *MockPartitionServiceClient) RemovePartitionRole(ctx context.Context, in *PartitionRoleRemoveRequest, opts ...grpc.CallOption) (*RemoveResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemovePartitionRole", varargs...)
	ret0, _ := ret[0].(*RemoveResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemovePartitionRole indicates an expected call of RemovePartitionRole.
func (mr *MockPartitionServiceClientMockRecorder) RemovePartitionRole(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemovePartitionRole", reflect.TypeOf((*MockPartitionServiceClient)(nil).RemovePartitionRole), varargs...)
}

// UpdatePartition mocks base method.
func (m *MockPartitionServiceClient) UpdatePartition(ctx context.Context, in *PartitionUpdateRequest, opts ...grpc.CallOption) (*PartitionObject, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdatePartition", varargs...)
	ret0, _ := ret[0].(*PartitionObject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePartition indicates an expected call of UpdatePartition.
func (mr *MockPartitionServiceClientMockRecorder) UpdatePartition(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePartition", reflect.TypeOf((*MockPartitionServiceClient)(nil).UpdatePartition), varargs...)
}

// MockPartitionService_ListTenantClient is a mock of PartitionService_ListTenantClient interface.
type MockPartitionService_ListTenantClient struct {
	ctrl     *gomock.Controller
	recorder *MockPartitionService_ListTenantClientMockRecorder
}

// MockPartitionService_ListTenantClientMockRecorder is the mock recorder for MockPartitionService_ListTenantClient.
type MockPartitionService_ListTenantClientMockRecorder struct {
	mock *MockPartitionService_ListTenantClient
}

// NewMockPartitionService_ListTenantClient creates a new mock instance.
func NewMockPartitionService_ListTenantClient(ctrl *gomock.Controller) *MockPartitionService_ListTenantClient {
	mock := &MockPartitionService_ListTenantClient{ctrl: ctrl}
	mock.recorder = &MockPartitionService_ListTenantClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPartitionService_ListTenantClient) EXPECT() *MockPartitionService_ListTenantClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockPartitionService_ListTenantClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockPartitionService_ListTenantClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockPartitionService_ListTenantClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockPartitionService_ListTenantClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockPartitionService_ListTenantClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockPartitionService_ListTenantClient)(nil).Context))
}

// Header mocks base method.
func (m *MockPartitionService_ListTenantClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockPartitionService_ListTenantClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockPartitionService_ListTenantClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockPartitionService_ListTenantClient) Recv() (*TenantObject, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*TenantObject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockPartitionService_ListTenantClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockPartitionService_ListTenantClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockPartitionService_ListTenantClient) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockPartitionService_ListTenantClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockPartitionService_ListTenantClient)(nil).RecvMsg), m)
}

// SendMsg mocks base method.
func (m_2 *MockPartitionService_ListTenantClient) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockPartitionService_ListTenantClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockPartitionService_ListTenantClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockPartitionService_ListTenantClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockPartitionService_ListTenantClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockPartitionService_ListTenantClient)(nil).Trailer))
}

// MockPartitionService_ListPartitionClient is a mock of PartitionService_ListPartitionClient interface.
type MockPartitionService_ListPartitionClient struct {
	ctrl     *gomock.Controller
	recorder *MockPartitionService_ListPartitionClientMockRecorder
}

// MockPartitionService_ListPartitionClientMockRecorder is the mock recorder for MockPartitionService_ListPartitionClient.
type MockPartitionService_ListPartitionClientMockRecorder struct {
	mock *MockPartitionService_ListPartitionClient
}

// NewMockPartitionService_ListPartitionClient creates a new mock instance.
func NewMockPartitionService_ListPartitionClient(ctrl *gomock.Controller) *MockPartitionService_ListPartitionClient {
	mock := &MockPartitionService_ListPartitionClient{ctrl: ctrl}
	mock.recorder = &MockPartitionService_ListPartitionClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPartitionService_ListPartitionClient) EXPECT() *MockPartitionService_ListPartitionClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockPartitionService_ListPartitionClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockPartitionService_ListPartitionClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockPartitionService_ListPartitionClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockPartitionService_ListPartitionClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockPartitionService_ListPartitionClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockPartitionService_ListPartitionClient)(nil).Context))
}

// Header mocks base method.
func (m *MockPartitionService_ListPartitionClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockPartitionService_ListPartitionClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockPartitionService_ListPartitionClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockPartitionService_ListPartitionClient) Recv() (*PartitionObject, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*PartitionObject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockPartitionService_ListPartitionClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockPartitionService_ListPartitionClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockPartitionService_ListPartitionClient) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockPartitionService_ListPartitionClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockPartitionService_ListPartitionClient)(nil).RecvMsg), m)
}

// SendMsg mocks base method.
func (m_2 *MockPartitionService_ListPartitionClient) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockPartitionService_ListPartitionClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockPartitionService_ListPartitionClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockPartitionService_ListPartitionClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockPartitionService_ListPartitionClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockPartitionService_ListPartitionClient)(nil).Trailer))
}

// MockPartitionServiceServer is a mock of PartitionServiceServer interface.
type MockPartitionServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockPartitionServiceServerMockRecorder
}

// MockPartitionServiceServerMockRecorder is the mock recorder for MockPartitionServiceServer.
type MockPartitionServiceServerMockRecorder struct {
	mock *MockPartitionServiceServer
}

// NewMockPartitionServiceServer creates a new mock instance.
func NewMockPartitionServiceServer(ctrl *gomock.Controller) *MockPartitionServiceServer {
	mock := &MockPartitionServiceServer{ctrl: ctrl}
	mock.recorder = &MockPartitionServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPartitionServiceServer) EXPECT() *MockPartitionServiceServerMockRecorder {
	return m.recorder
}

// CreateAccess mocks base method.
func (m *MockPartitionServiceServer) CreateAccess(arg0 context.Context, arg1 *AccessCreateRequest) (*AccessObject, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccess", arg0, arg1)
	ret0, _ := ret[0].(*AccessObject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccess indicates an expected call of CreateAccess.
func (mr *MockPartitionServiceServerMockRecorder) CreateAccess(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccess", reflect.TypeOf((*MockPartitionServiceServer)(nil).CreateAccess), arg0, arg1)
}

// CreateAccessRole mocks base method.
func (m *MockPartitionServiceServer) CreateAccessRole(arg0 context.Context, arg1 *AccessRoleCreateRequest) (*AccessRoleObject, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccessRole", arg0, arg1)
	ret0, _ := ret[0].(*AccessRoleObject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccessRole indicates an expected call of CreateAccessRole.
func (mr *MockPartitionServiceServerMockRecorder) CreateAccessRole(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccessRole", reflect.TypeOf((*MockPartitionServiceServer)(nil).CreateAccessRole), arg0, arg1)
}

// CreatePage mocks base method.
func (m *MockPartitionServiceServer) CreatePage(arg0 context.Context, arg1 *PageCreateRequest) (*PageObject, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePage", arg0, arg1)
	ret0, _ := ret[0].(*PageObject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePage indicates an expected call of CreatePage.
func (mr *MockPartitionServiceServerMockRecorder) CreatePage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePage", reflect.TypeOf((*MockPartitionServiceServer)(nil).CreatePage), arg0, arg1)
}

// CreatePartition mocks base method.
func (m *MockPartitionServiceServer) CreatePartition(arg0 context.Context, arg1 *PartitionCreateRequest) (*PartitionObject, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePartition", arg0, arg1)
	ret0, _ := ret[0].(*PartitionObject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePartition indicates an expected call of CreatePartition.
func (mr *MockPartitionServiceServerMockRecorder) CreatePartition(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePartition", reflect.TypeOf((*MockPartitionServiceServer)(nil).CreatePartition), arg0, arg1)
}

// CreatePartitionRole mocks base method.
func (m *MockPartitionServiceServer) CreatePartitionRole(arg0 context.Context, arg1 *PartitionRoleCreateRequest) (*PartitionRoleObject, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePartitionRole", arg0, arg1)
	ret0, _ := ret[0].(*PartitionRoleObject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePartitionRole indicates an expected call of CreatePartitionRole.
func (mr *MockPartitionServiceServerMockRecorder) CreatePartitionRole(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePartitionRole", reflect.TypeOf((*MockPartitionServiceServer)(nil).CreatePartitionRole), arg0, arg1)
}

// CreateTenant mocks base method.
func (m *MockPartitionServiceServer) CreateTenant(arg0 context.Context, arg1 *TenantRequest) (*TenantObject, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTenant", arg0, arg1)
	ret0, _ := ret[0].(*TenantObject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTenant indicates an expected call of CreateTenant.
func (mr *MockPartitionServiceServerMockRecorder) CreateTenant(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTenant", reflect.TypeOf((*MockPartitionServiceServer)(nil).CreateTenant), arg0, arg1)
}

// GetAccess mocks base method.
func (m *MockPartitionServiceServer) GetAccess(arg0 context.Context, arg1 *AccessGetRequest) (*AccessObject, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccess", arg0, arg1)
	ret0, _ := ret[0].(*AccessObject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccess indicates an expected call of GetAccess.
func (mr *MockPartitionServiceServerMockRecorder) GetAccess(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccess", reflect.TypeOf((*MockPartitionServiceServer)(nil).GetAccess), arg0, arg1)
}

// GetPage mocks base method.
func (m *MockPartitionServiceServer) GetPage(arg0 context.Context, arg1 *PageGetRequest) (*PageObject, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPage", arg0, arg1)
	ret0, _ := ret[0].(*PageObject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPage indicates an expected call of GetPage.
func (mr *MockPartitionServiceServerMockRecorder) GetPage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPage", reflect.TypeOf((*MockPartitionServiceServer)(nil).GetPage), arg0, arg1)
}

// GetPartition mocks base method.
func (m *MockPartitionServiceServer) GetPartition(arg0 context.Context, arg1 *GetRequest) (*PartitionObject, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPartition", arg0, arg1)
	ret0, _ := ret[0].(*PartitionObject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPartition indicates an expected call of GetPartition.
func (mr *MockPartitionServiceServerMockRecorder) GetPartition(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPartition", reflect.TypeOf((*MockPartitionServiceServer)(nil).GetPartition), arg0, arg1)
}

// GetTenant mocks base method.
func (m *MockPartitionServiceServer) GetTenant(arg0 context.Context, arg1 *GetRequest) (*TenantObject, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTenant", arg0, arg1)
	ret0, _ := ret[0].(*TenantObject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTenant indicates an expected call of GetTenant.
func (mr *MockPartitionServiceServerMockRecorder) GetTenant(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTenant", reflect.TypeOf((*MockPartitionServiceServer)(nil).GetTenant), arg0, arg1)
}

// ListAccessRoles mocks base method.
func (m *MockPartitionServiceServer) ListAccessRoles(arg0 context.Context, arg1 *AccessRoleListRequest) (*AccessRoleListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAccessRoles", arg0, arg1)
	ret0, _ := ret[0].(*AccessRoleListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAccessRoles indicates an expected call of ListAccessRoles.
func (mr *MockPartitionServiceServerMockRecorder) ListAccessRoles(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccessRoles", reflect.TypeOf((*MockPartitionServiceServer)(nil).ListAccessRoles), arg0, arg1)
}

// ListPartition mocks base method.
func (m *MockPartitionServiceServer) ListPartition(arg0 *SearchRequest, arg1 PartitionService_ListPartitionServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPartition", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListPartition indicates an expected call of ListPartition.
func (mr *MockPartitionServiceServerMockRecorder) ListPartition(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPartition", reflect.TypeOf((*MockPartitionServiceServer)(nil).ListPartition), arg0, arg1)
}

// ListPartitionRoles mocks base method.
func (m *MockPartitionServiceServer) ListPartitionRoles(arg0 context.Context, arg1 *PartitionRoleListRequest) (*PartitionRoleListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPartitionRoles", arg0, arg1)
	ret0, _ := ret[0].(*PartitionRoleListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPartitionRoles indicates an expected call of ListPartitionRoles.
func (mr *MockPartitionServiceServerMockRecorder) ListPartitionRoles(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPartitionRoles", reflect.TypeOf((*MockPartitionServiceServer)(nil).ListPartitionRoles), arg0, arg1)
}

// ListTenant mocks base method.
func (m *MockPartitionServiceServer) ListTenant(arg0 *SearchRequest, arg1 PartitionService_ListTenantServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTenant", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListTenant indicates an expected call of ListTenant.
func (mr *MockPartitionServiceServerMockRecorder) ListTenant(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTenant", reflect.TypeOf((*MockPartitionServiceServer)(nil).ListTenant), arg0, arg1)
}

// RemoveAccess mocks base method.
func (m *MockPartitionServiceServer) RemoveAccess(arg0 context.Context, arg1 *AccessRemoveRequest) (*RemoveResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveAccess", arg0, arg1)
	ret0, _ := ret[0].(*RemoveResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveAccess indicates an expected call of RemoveAccess.
func (mr *MockPartitionServiceServerMockRecorder) RemoveAccess(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveAccess", reflect.TypeOf((*MockPartitionServiceServer)(nil).RemoveAccess), arg0, arg1)
}

// RemoveAccessRole mocks base method.
func (m *MockPartitionServiceServer) RemoveAccessRole(arg0 context.Context, arg1 *AccessRoleRemoveRequest) (*RemoveResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveAccessRole", arg0, arg1)
	ret0, _ := ret[0].(*RemoveResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveAccessRole indicates an expected call of RemoveAccessRole.
func (mr *MockPartitionServiceServerMockRecorder) RemoveAccessRole(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveAccessRole", reflect.TypeOf((*MockPartitionServiceServer)(nil).RemoveAccessRole), arg0, arg1)
}

// RemovePage mocks base method.
func (m *MockPartitionServiceServer) RemovePage(arg0 context.Context, arg1 *PageRemoveRequest) (*RemoveResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemovePage", arg0, arg1)
	ret0, _ := ret[0].(*RemoveResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemovePage indicates an expected call of RemovePage.
func (mr *MockPartitionServiceServerMockRecorder) RemovePage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemovePage", reflect.TypeOf((*MockPartitionServiceServer)(nil).RemovePage), arg0, arg1)
}

// RemovePartitionRole mocks base method.
func (m *MockPartitionServiceServer) RemovePartitionRole(arg0 context.Context, arg1 *PartitionRoleRemoveRequest) (*RemoveResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemovePartitionRole", arg0, arg1)
	ret0, _ := ret[0].(*RemoveResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemovePartitionRole indicates an expected call of RemovePartitionRole.
func (mr *MockPartitionServiceServerMockRecorder) RemovePartitionRole(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemovePartitionRole", reflect.TypeOf((*MockPartitionServiceServer)(nil).RemovePartitionRole), arg0, arg1)
}

// UpdatePartition mocks base method.
func (m *MockPartitionServiceServer) UpdatePartition(arg0 context.Context, arg1 *PartitionUpdateRequest) (*PartitionObject, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePartition", arg0, arg1)
	ret0, _ := ret[0].(*PartitionObject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePartition indicates an expected call of UpdatePartition.
func (mr *MockPartitionServiceServerMockRecorder) UpdatePartition(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePartition", reflect.TypeOf((*MockPartitionServiceServer)(nil).UpdatePartition), arg0, arg1)
}

// mustEmbedUnimplementedPartitionServiceServer mocks base method.
func (m *MockPartitionServiceServer) mustEmbedUnimplementedPartitionServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedPartitionServiceServer")
}

// mustEmbedUnimplementedPartitionServiceServer indicates an expected call of mustEmbedUnimplementedPartitionServiceServer.
func (mr *MockPartitionServiceServerMockRecorder) mustEmbedUnimplementedPartitionServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedPartitionServiceServer", reflect.TypeOf((*MockPartitionServiceServer)(nil).mustEmbedUnimplementedPartitionServiceServer))
}

// MockUnsafePartitionServiceServer is a mock of UnsafePartitionServiceServer interface.
type MockUnsafePartitionServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafePartitionServiceServerMockRecorder
}

// MockUnsafePartitionServiceServerMockRecorder is the mock recorder for MockUnsafePartitionServiceServer.
type MockUnsafePartitionServiceServerMockRecorder struct {
	mock *MockUnsafePartitionServiceServer
}

// NewMockUnsafePartitionServiceServer creates a new mock instance.
func NewMockUnsafePartitionServiceServer(ctrl *gomock.Controller) *MockUnsafePartitionServiceServer {
	mock := &MockUnsafePartitionServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafePartitionServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafePartitionServiceServer) EXPECT() *MockUnsafePartitionServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedPartitionServiceServer mocks base method.
func (m *MockUnsafePartitionServiceServer) mustEmbedUnimplementedPartitionServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedPartitionServiceServer")
}

// mustEmbedUnimplementedPartitionServiceServer indicates an expected call of mustEmbedUnimplementedPartitionServiceServer.
func (mr *MockUnsafePartitionServiceServerMockRecorder) mustEmbedUnimplementedPartitionServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedPartitionServiceServer", reflect.TypeOf((*MockUnsafePartitionServiceServer)(nil).mustEmbedUnimplementedPartitionServiceServer))
}

// MockPartitionService_ListTenantServer is a mock of PartitionService_ListTenantServer interface.
type MockPartitionService_ListTenantServer struct {
	ctrl     *gomock.Controller
	recorder *MockPartitionService_ListTenantServerMockRecorder
}

// MockPartitionService_ListTenantServerMockRecorder is the mock recorder for MockPartitionService_ListTenantServer.
type MockPartitionService_ListTenantServerMockRecorder struct {
	mock *MockPartitionService_ListTenantServer
}

// NewMockPartitionService_ListTenantServer creates a new mock instance.
func NewMockPartitionService_ListTenantServer(ctrl *gomock.Controller) *MockPartitionService_ListTenantServer {
	mock := &MockPartitionService_ListTenantServer{ctrl: ctrl}
	mock.recorder = &MockPartitionService_ListTenantServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPartitionService_ListTenantServer) EXPECT() *MockPartitionService_ListTenantServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockPartitionService_ListTenantServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockPartitionService_ListTenantServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockPartitionService_ListTenantServer)(nil).Context))
}

// RecvMsg mocks base method.
func (m_2 *MockPartitionService_ListTenantServer) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockPartitionService_ListTenantServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockPartitionService_ListTenantServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockPartitionService_ListTenantServer) Send(arg0 *TenantObject) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockPartitionService_ListTenantServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockPartitionService_ListTenantServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockPartitionService_ListTenantServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockPartitionService_ListTenantServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockPartitionService_ListTenantServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockPartitionService_ListTenantServer) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockPartitionService_ListTenantServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockPartitionService_ListTenantServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockPartitionService_ListTenantServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockPartitionService_ListTenantServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockPartitionService_ListTenantServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockPartitionService_ListTenantServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockPartitionService_ListTenantServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockPartitionService_ListTenantServer)(nil).SetTrailer), arg0)
}

// MockPartitionService_ListPartitionServer is a mock of PartitionService_ListPartitionServer interface.
type MockPartitionService_ListPartitionServer struct {
	ctrl     *gomock.Controller
	recorder *MockPartitionService_ListPartitionServerMockRecorder
}

// MockPartitionService_ListPartitionServerMockRecorder is the mock recorder for MockPartitionService_ListPartitionServer.
type MockPartitionService_ListPartitionServerMockRecorder struct {
	mock *MockPartitionService_ListPartitionServer
}

// NewMockPartitionService_ListPartitionServer creates a new mock instance.
func NewMockPartitionService_ListPartitionServer(ctrl *gomock.Controller) *MockPartitionService_ListPartitionServer {
	mock := &MockPartitionService_ListPartitionServer{ctrl: ctrl}
	mock.recorder = &MockPartitionService_ListPartitionServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPartitionService_ListPartitionServer) EXPECT() *MockPartitionService_ListPartitionServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockPartitionService_ListPartitionServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockPartitionService_ListPartitionServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockPartitionService_ListPartitionServer)(nil).Context))
}

// RecvMsg mocks base method.
func (m_2 *MockPartitionService_ListPartitionServer) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockPartitionService_ListPartitionServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockPartitionService_ListPartitionServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockPartitionService_ListPartitionServer) Send(arg0 *PartitionObject) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockPartitionService_ListPartitionServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockPartitionService_ListPartitionServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockPartitionService_ListPartitionServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockPartitionService_ListPartitionServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockPartitionService_ListPartitionServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockPartitionService_ListPartitionServer) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockPartitionService_ListPartitionServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockPartitionService_ListPartitionServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockPartitionService_ListPartitionServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockPartitionService_ListPartitionServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockPartitionService_ListPartitionServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockPartitionService_ListPartitionServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockPartitionService_ListPartitionServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockPartitionService_ListPartitionServer)(nil).SetTrailer), arg0)
}
