// Code generated by MockGen. DO NOT EDIT.
// Source: partition_grpc.pb.go

// Package mock_partition_v1 is a generated GoMock package.
package mock_partition_v1

import (
	context "context"
	reflect "reflect"

	service_partition_api "github.com/antinvestor/service-partition-api"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockPartitionServiceClient is a mock of PartitionServiceClient interface.
type MockPartitionServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockPartitionServiceClientMockRecorder
}

// MockPartitionServiceClientMockRecorder is the mock recorder for MockPartitionServiceClient.
type MockPartitionServiceClientMockRecorder struct {
	mock *MockPartitionServiceClient
}

// NewMockPartitionServiceClient creates a new mock instance.
func NewMockPartitionServiceClient(ctrl *gomock.Controller) *MockPartitionServiceClient {
	mock := &MockPartitionServiceClient{ctrl: ctrl}
	mock.recorder = &MockPartitionServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPartitionServiceClient) EXPECT() *MockPartitionServiceClientMockRecorder {
	return m.recorder
}

// CreateAccess mocks base method.
func (m *MockPartitionServiceClient) CreateAccess(ctx context.Context, in *service_partition_api.AccessCreateRequest, opts ...grpc.CallOption) (*service_partition_api.AccessObject, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateAccess", varargs...)
	ret0, _ := ret[0].(*service_partition_api.AccessObject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccess indicates an expected call of CreateAccess.
func (mr *MockPartitionServiceClientMockRecorder) CreateAccess(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccess", reflect.TypeOf((*MockPartitionServiceClient)(nil).CreateAccess), varargs...)
}

// CreateAccessRole mocks base method.
func (m *MockPartitionServiceClient) CreateAccessRole(ctx context.Context, in *service_partition_api.AccessRoleCreateRequest, opts ...grpc.CallOption) (*service_partition_api.AccessRoleObject, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateAccessRole", varargs...)
	ret0, _ := ret[0].(*service_partition_api.AccessRoleObject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccessRole indicates an expected call of CreateAccessRole.
func (mr *MockPartitionServiceClientMockRecorder) CreateAccessRole(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccessRole", reflect.TypeOf((*MockPartitionServiceClient)(nil).CreateAccessRole), varargs...)
}

// CreatePage mocks base method.
func (m *MockPartitionServiceClient) CreatePage(ctx context.Context, in *service_partition_api.PageCreateRequest, opts ...grpc.CallOption) (*service_partition_api.PageObject, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreatePage", varargs...)
	ret0, _ := ret[0].(*service_partition_api.PageObject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePage indicates an expected call of CreatePage.
func (mr *MockPartitionServiceClientMockRecorder) CreatePage(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePage", reflect.TypeOf((*MockPartitionServiceClient)(nil).CreatePage), varargs...)
}

// CreatePartition mocks base method.
func (m *MockPartitionServiceClient) CreatePartition(ctx context.Context, in *service_partition_api.PartitionCreateRequest, opts ...grpc.CallOption) (*service_partition_api.PartitionObject, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreatePartition", varargs...)
	ret0, _ := ret[0].(*service_partition_api.PartitionObject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePartition indicates an expected call of CreatePartition.
func (mr *MockPartitionServiceClientMockRecorder) CreatePartition(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePartition", reflect.TypeOf((*MockPartitionServiceClient)(nil).CreatePartition), varargs...)
}

// CreatePartitionRole mocks base method.
func (m *MockPartitionServiceClient) CreatePartitionRole(ctx context.Context, in *service_partition_api.PartitionRoleCreateRequest, opts ...grpc.CallOption) (*service_partition_api.PartitionRoleObject, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreatePartitionRole", varargs...)
	ret0, _ := ret[0].(*service_partition_api.PartitionRoleObject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePartitionRole indicates an expected call of CreatePartitionRole.
func (mr *MockPartitionServiceClientMockRecorder) CreatePartitionRole(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePartitionRole", reflect.TypeOf((*MockPartitionServiceClient)(nil).CreatePartitionRole), varargs...)
}

// CreateTenant mocks base method.
func (m *MockPartitionServiceClient) CreateTenant(ctx context.Context, in *service_partition_api.TenantRequest, opts ...grpc.CallOption) (*service_partition_api.TenantObject, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateTenant", varargs...)
	ret0, _ := ret[0].(*service_partition_api.TenantObject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTenant indicates an expected call of CreateTenant.
func (mr *MockPartitionServiceClientMockRecorder) CreateTenant(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTenant", reflect.TypeOf((*MockPartitionServiceClient)(nil).CreateTenant), varargs...)
}

// GetAccess mocks base method.
func (m *MockPartitionServiceClient) GetAccess(ctx context.Context, in *service_partition_api.AccessGetRequest, opts ...grpc.CallOption) (*service_partition_api.AccessObject, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAccess", varargs...)
	ret0, _ := ret[0].(*service_partition_api.AccessObject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccess indicates an expected call of GetAccess.
func (mr *MockPartitionServiceClientMockRecorder) GetAccess(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccess", reflect.TypeOf((*MockPartitionServiceClient)(nil).GetAccess), varargs...)
}

// GetPage mocks base method.
func (m *MockPartitionServiceClient) GetPage(ctx context.Context, in *service_partition_api.PageGetRequest, opts ...grpc.CallOption) (*service_partition_api.PageObject, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPage", varargs...)
	ret0, _ := ret[0].(*service_partition_api.PageObject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPage indicates an expected call of GetPage.
func (mr *MockPartitionServiceClientMockRecorder) GetPage(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPage", reflect.TypeOf((*MockPartitionServiceClient)(nil).GetPage), varargs...)
}

// GetPartition mocks base method.
func (m *MockPartitionServiceClient) GetPartition(ctx context.Context, in *service_partition_api.PartitionGetRequest, opts ...grpc.CallOption) (*service_partition_api.PartitionObject, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPartition", varargs...)
	ret0, _ := ret[0].(*service_partition_api.PartitionObject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPartition indicates an expected call of GetPartition.
func (mr *MockPartitionServiceClientMockRecorder) GetPartition(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPartition", reflect.TypeOf((*MockPartitionServiceClient)(nil).GetPartition), varargs...)
}

// ListAccessRoles mocks base method.
func (m *MockPartitionServiceClient) ListAccessRoles(ctx context.Context, in *service_partition_api.AccessRoleListRequest, opts ...grpc.CallOption) (*service_partition_api.AccessRoleListResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAccessRoles", varargs...)
	ret0, _ := ret[0].(*service_partition_api.AccessRoleListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAccessRoles indicates an expected call of ListAccessRoles.
func (mr *MockPartitionServiceClientMockRecorder) ListAccessRoles(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccessRoles", reflect.TypeOf((*MockPartitionServiceClient)(nil).ListAccessRoles), varargs...)
}

// ListPartitionRoles mocks base method.
func (m *MockPartitionServiceClient) ListPartitionRoles(ctx context.Context, in *service_partition_api.PartitionRoleListRequest, opts ...grpc.CallOption) (*service_partition_api.PartitionRoleListResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPartitionRoles", varargs...)
	ret0, _ := ret[0].(*service_partition_api.PartitionRoleListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPartitionRoles indicates an expected call of ListPartitionRoles.
func (mr *MockPartitionServiceClientMockRecorder) ListPartitionRoles(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPartitionRoles", reflect.TypeOf((*MockPartitionServiceClient)(nil).ListPartitionRoles), varargs...)
}

// RemoveAccess mocks base method.
func (m *MockPartitionServiceClient) RemoveAccess(ctx context.Context, in *service_partition_api.AccessRemoveRequest, opts ...grpc.CallOption) (*service_partition_api.RemoveResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveAccess", varargs...)
	ret0, _ := ret[0].(*service_partition_api.RemoveResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveAccess indicates an expected call of RemoveAccess.
func (mr *MockPartitionServiceClientMockRecorder) RemoveAccess(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveAccess", reflect.TypeOf((*MockPartitionServiceClient)(nil).RemoveAccess), varargs...)
}

// RemoveAccessRole mocks base method.
func (m *MockPartitionServiceClient) RemoveAccessRole(ctx context.Context, in *service_partition_api.AccessRoleRemoveRequest, opts ...grpc.CallOption) (*service_partition_api.RemoveResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveAccessRole", varargs...)
	ret0, _ := ret[0].(*service_partition_api.RemoveResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveAccessRole indicates an expected call of RemoveAccessRole.
func (mr *MockPartitionServiceClientMockRecorder) RemoveAccessRole(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveAccessRole", reflect.TypeOf((*MockPartitionServiceClient)(nil).RemoveAccessRole), varargs...)
}

// RemovePage mocks base method.
func (m *MockPartitionServiceClient) RemovePage(ctx context.Context, in *service_partition_api.PageRemoveRequest, opts ...grpc.CallOption) (*service_partition_api.RemoveResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemovePage", varargs...)
	ret0, _ := ret[0].(*service_partition_api.RemoveResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemovePage indicates an expected call of RemovePage.
func (mr *MockPartitionServiceClientMockRecorder) RemovePage(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemovePage", reflect.TypeOf((*MockPartitionServiceClient)(nil).RemovePage), varargs...)
}

// RemovePartitionRole mocks base method.
func (m *MockPartitionServiceClient) RemovePartitionRole(ctx context.Context, in *service_partition_api.PartitionRoleRemoveRequest, opts ...grpc.CallOption) (*service_partition_api.RemoveResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemovePartitionRole", varargs...)
	ret0, _ := ret[0].(*service_partition_api.RemoveResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemovePartitionRole indicates an expected call of RemovePartitionRole.
func (mr *MockPartitionServiceClientMockRecorder) RemovePartitionRole(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemovePartitionRole", reflect.TypeOf((*MockPartitionServiceClient)(nil).RemovePartitionRole), varargs...)
}

// UpdatePartition mocks base method.
func (m *MockPartitionServiceClient) UpdatePartition(ctx context.Context, in *service_partition_api.PartitionUpdateRequest, opts ...grpc.CallOption) (*service_partition_api.PartitionObject, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdatePartition", varargs...)
	ret0, _ := ret[0].(*service_partition_api.PartitionObject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePartition indicates an expected call of UpdatePartition.
func (mr *MockPartitionServiceClientMockRecorder) UpdatePartition(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePartition", reflect.TypeOf((*MockPartitionServiceClient)(nil).UpdatePartition), varargs...)
}

// MockPartitionServiceServer is a mock of PartitionServiceServer interface.
type MockPartitionServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockPartitionServiceServerMockRecorder
}

// MockPartitionServiceServerMockRecorder is the mock recorder for MockPartitionServiceServer.
type MockPartitionServiceServerMockRecorder struct {
	mock *MockPartitionServiceServer
}

// NewMockPartitionServiceServer creates a new mock instance.
func NewMockPartitionServiceServer(ctrl *gomock.Controller) *MockPartitionServiceServer {
	mock := &MockPartitionServiceServer{ctrl: ctrl}
	mock.recorder = &MockPartitionServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPartitionServiceServer) EXPECT() *MockPartitionServiceServerMockRecorder {
	return m.recorder
}

// CreateAccess mocks base method.
func (m *MockPartitionServiceServer) CreateAccess(arg0 context.Context, arg1 *service_partition_api.AccessCreateRequest) (*service_partition_api.AccessObject, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccess", arg0, arg1)
	ret0, _ := ret[0].(*service_partition_api.AccessObject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccess indicates an expected call of CreateAccess.
func (mr *MockPartitionServiceServerMockRecorder) CreateAccess(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccess", reflect.TypeOf((*MockPartitionServiceServer)(nil).CreateAccess), arg0, arg1)
}

// CreateAccessRole mocks base method.
func (m *MockPartitionServiceServer) CreateAccessRole(arg0 context.Context, arg1 *service_partition_api.AccessRoleCreateRequest) (*service_partition_api.AccessRoleObject, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccessRole", arg0, arg1)
	ret0, _ := ret[0].(*service_partition_api.AccessRoleObject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccessRole indicates an expected call of CreateAccessRole.
func (mr *MockPartitionServiceServerMockRecorder) CreateAccessRole(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccessRole", reflect.TypeOf((*MockPartitionServiceServer)(nil).CreateAccessRole), arg0, arg1)
}

// CreatePage mocks base method.
func (m *MockPartitionServiceServer) CreatePage(arg0 context.Context, arg1 *service_partition_api.PageCreateRequest) (*service_partition_api.PageObject, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePage", arg0, arg1)
	ret0, _ := ret[0].(*service_partition_api.PageObject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePage indicates an expected call of CreatePage.
func (mr *MockPartitionServiceServerMockRecorder) CreatePage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePage", reflect.TypeOf((*MockPartitionServiceServer)(nil).CreatePage), arg0, arg1)
}

// CreatePartition mocks base method.
func (m *MockPartitionServiceServer) CreatePartition(arg0 context.Context, arg1 *service_partition_api.PartitionCreateRequest) (*service_partition_api.PartitionObject, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePartition", arg0, arg1)
	ret0, _ := ret[0].(*service_partition_api.PartitionObject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePartition indicates an expected call of CreatePartition.
func (mr *MockPartitionServiceServerMockRecorder) CreatePartition(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePartition", reflect.TypeOf((*MockPartitionServiceServer)(nil).CreatePartition), arg0, arg1)
}

// CreatePartitionRole mocks base method.
func (m *MockPartitionServiceServer) CreatePartitionRole(arg0 context.Context, arg1 *service_partition_api.PartitionRoleCreateRequest) (*service_partition_api.PartitionRoleObject, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePartitionRole", arg0, arg1)
	ret0, _ := ret[0].(*service_partition_api.PartitionRoleObject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePartitionRole indicates an expected call of CreatePartitionRole.
func (mr *MockPartitionServiceServerMockRecorder) CreatePartitionRole(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePartitionRole", reflect.TypeOf((*MockPartitionServiceServer)(nil).CreatePartitionRole), arg0, arg1)
}

// CreateTenant mocks base method.
func (m *MockPartitionServiceServer) CreateTenant(arg0 context.Context, arg1 *service_partition_api.TenantRequest) (*service_partition_api.TenantObject, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTenant", arg0, arg1)
	ret0, _ := ret[0].(*service_partition_api.TenantObject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTenant indicates an expected call of CreateTenant.
func (mr *MockPartitionServiceServerMockRecorder) CreateTenant(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTenant", reflect.TypeOf((*MockPartitionServiceServer)(nil).CreateTenant), arg0, arg1)
}

// GetAccess mocks base method.
func (m *MockPartitionServiceServer) GetAccess(arg0 context.Context, arg1 *service_partition_api.AccessGetRequest) (*service_partition_api.AccessObject, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccess", arg0, arg1)
	ret0, _ := ret[0].(*service_partition_api.AccessObject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccess indicates an expected call of GetAccess.
func (mr *MockPartitionServiceServerMockRecorder) GetAccess(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccess", reflect.TypeOf((*MockPartitionServiceServer)(nil).GetAccess), arg0, arg1)
}

// GetPage mocks base method.
func (m *MockPartitionServiceServer) GetPage(arg0 context.Context, arg1 *service_partition_api.PageGetRequest) (*service_partition_api.PageObject, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPage", arg0, arg1)
	ret0, _ := ret[0].(*service_partition_api.PageObject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPage indicates an expected call of GetPage.
func (mr *MockPartitionServiceServerMockRecorder) GetPage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPage", reflect.TypeOf((*MockPartitionServiceServer)(nil).GetPage), arg0, arg1)
}

// GetPartition mocks base method.
func (m *MockPartitionServiceServer) GetPartition(arg0 context.Context, arg1 *service_partition_api.PartitionGetRequest) (*service_partition_api.PartitionObject, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPartition", arg0, arg1)
	ret0, _ := ret[0].(*service_partition_api.PartitionObject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPartition indicates an expected call of GetPartition.
func (mr *MockPartitionServiceServerMockRecorder) GetPartition(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPartition", reflect.TypeOf((*MockPartitionServiceServer)(nil).GetPartition), arg0, arg1)
}

// ListAccessRoles mocks base method.
func (m *MockPartitionServiceServer) ListAccessRoles(arg0 context.Context, arg1 *service_partition_api.AccessRoleListRequest) (*service_partition_api.AccessRoleListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAccessRoles", arg0, arg1)
	ret0, _ := ret[0].(*service_partition_api.AccessRoleListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAccessRoles indicates an expected call of ListAccessRoles.
func (mr *MockPartitionServiceServerMockRecorder) ListAccessRoles(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccessRoles", reflect.TypeOf((*MockPartitionServiceServer)(nil).ListAccessRoles), arg0, arg1)
}

// ListPartitionRoles mocks base method.
func (m *MockPartitionServiceServer) ListPartitionRoles(arg0 context.Context, arg1 *service_partition_api.PartitionRoleListRequest) (*service_partition_api.PartitionRoleListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPartitionRoles", arg0, arg1)
	ret0, _ := ret[0].(*service_partition_api.PartitionRoleListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPartitionRoles indicates an expected call of ListPartitionRoles.
func (mr *MockPartitionServiceServerMockRecorder) ListPartitionRoles(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPartitionRoles", reflect.TypeOf((*MockPartitionServiceServer)(nil).ListPartitionRoles), arg0, arg1)
}

// RemoveAccess mocks base method.
func (m *MockPartitionServiceServer) RemoveAccess(arg0 context.Context, arg1 *service_partition_api.AccessRemoveRequest) (*service_partition_api.RemoveResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveAccess", arg0, arg1)
	ret0, _ := ret[0].(*service_partition_api.RemoveResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveAccess indicates an expected call of RemoveAccess.
func (mr *MockPartitionServiceServerMockRecorder) RemoveAccess(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveAccess", reflect.TypeOf((*MockPartitionServiceServer)(nil).RemoveAccess), arg0, arg1)
}

// RemoveAccessRole mocks base method.
func (m *MockPartitionServiceServer) RemoveAccessRole(arg0 context.Context, arg1 *service_partition_api.AccessRoleRemoveRequest) (*service_partition_api.RemoveResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveAccessRole", arg0, arg1)
	ret0, _ := ret[0].(*service_partition_api.RemoveResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveAccessRole indicates an expected call of RemoveAccessRole.
func (mr *MockPartitionServiceServerMockRecorder) RemoveAccessRole(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveAccessRole", reflect.TypeOf((*MockPartitionServiceServer)(nil).RemoveAccessRole), arg0, arg1)
}

// RemovePage mocks base method.
func (m *MockPartitionServiceServer) RemovePage(arg0 context.Context, arg1 *service_partition_api.PageRemoveRequest) (*service_partition_api.RemoveResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemovePage", arg0, arg1)
	ret0, _ := ret[0].(*service_partition_api.RemoveResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemovePage indicates an expected call of RemovePage.
func (mr *MockPartitionServiceServerMockRecorder) RemovePage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemovePage", reflect.TypeOf((*MockPartitionServiceServer)(nil).RemovePage), arg0, arg1)
}

// RemovePartitionRole mocks base method.
func (m *MockPartitionServiceServer) RemovePartitionRole(arg0 context.Context, arg1 *service_partition_api.PartitionRoleRemoveRequest) (*service_partition_api.RemoveResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemovePartitionRole", arg0, arg1)
	ret0, _ := ret[0].(*service_partition_api.RemoveResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemovePartitionRole indicates an expected call of RemovePartitionRole.
func (mr *MockPartitionServiceServerMockRecorder) RemovePartitionRole(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemovePartitionRole", reflect.TypeOf((*MockPartitionServiceServer)(nil).RemovePartitionRole), arg0, arg1)
}

// UpdatePartition mocks base method.
func (m *MockPartitionServiceServer) UpdatePartition(arg0 context.Context, arg1 *service_partition_api.PartitionUpdateRequest) (*service_partition_api.PartitionObject, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePartition", arg0, arg1)
	ret0, _ := ret[0].(*service_partition_api.PartitionObject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePartition indicates an expected call of UpdatePartition.
func (mr *MockPartitionServiceServerMockRecorder) UpdatePartition(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePartition", reflect.TypeOf((*MockPartitionServiceServer)(nil).UpdatePartition), arg0, arg1)
}

// mustEmbedUnimplementedPartitionServiceServer mocks base method.
func (m *MockPartitionServiceServer) mustEmbedUnimplementedPartitionServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedPartitionServiceServer")
}

// mustEmbedUnimplementedPartitionServiceServer indicates an expected call of mustEmbedUnimplementedPartitionServiceServer.
func (mr *MockPartitionServiceServerMockRecorder) mustEmbedUnimplementedPartitionServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedPartitionServiceServer", reflect.TypeOf((*MockPartitionServiceServer)(nil).mustEmbedUnimplementedPartitionServiceServer))
}

// MockUnsafePartitionServiceServer is a mock of UnsafePartitionServiceServer interface.
type MockUnsafePartitionServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafePartitionServiceServerMockRecorder
}

// MockUnsafePartitionServiceServerMockRecorder is the mock recorder for MockUnsafePartitionServiceServer.
type MockUnsafePartitionServiceServerMockRecorder struct {
	mock *MockUnsafePartitionServiceServer
}

// NewMockUnsafePartitionServiceServer creates a new mock instance.
func NewMockUnsafePartitionServiceServer(ctrl *gomock.Controller) *MockUnsafePartitionServiceServer {
	mock := &MockUnsafePartitionServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafePartitionServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafePartitionServiceServer) EXPECT() *MockUnsafePartitionServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedPartitionServiceServer mocks base method.
func (m *MockUnsafePartitionServiceServer) mustEmbedUnimplementedPartitionServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedPartitionServiceServer")
}

// mustEmbedUnimplementedPartitionServiceServer indicates an expected call of mustEmbedUnimplementedPartitionServiceServer.
func (mr *MockUnsafePartitionServiceServerMockRecorder) mustEmbedUnimplementedPartitionServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedPartitionServiceServer", reflect.TypeOf((*MockUnsafePartitionServiceServer)(nil).mustEmbedUnimplementedPartitionServiceServer))
}
